// TtoolBox.js
// Creates a vertical toolbox of icon buttons with tooltips and an HTML element tree panel
(function(global) {
// Default toolbar icons array (name + SVG)
  const defaultIcons = [
   {name:"Html Elements",svg:`<svg version="1.1"  xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 512 512" xml:space="preserve"><style type="text/css">	.st0{fill:#000000;}</style><g><path class="st0" d="M378.413,0H208.297h-13.182L185.8,9.314L57.02,138.102l-9.314,9.314v13.176v265.514   c0,47.36,38.528,85.895,85.896,85.895h244.811c47.353,0,85.881-38.535,85.881-85.895V85.896C464.294,38.528,425.766,0,378.413,0z    M432.497,426.105c0,29.877-24.214,54.091-54.084,54.091H133.602c-29.884,0-54.098-24.214-54.098-54.091V160.591h83.716   c24.885,0,45.077-20.178,45.077-45.07V31.804h170.116c29.87,0,54.084,24.214,54.084,54.092V426.105z"/><path class="st0" d="M163.164,253.19c-5.097,0-8.867,3.652-8.867,9.482v23.453c0,0.489-0.251,0.734-0.726,0.734h-26.993   c-0.475,0-0.726-0.245-0.726-0.734v-23.453c0-5.831-3.771-9.482-8.868-9.482c-5.222,0-8.993,3.652-8.993,9.482v65.144   c0,5.83,3.645,9.475,8.868,9.475c5.111,0,8.993-3.645,8.993-9.475v-24.305c0-0.489,0.251-0.734,0.726-0.734h26.993   c0.475,0,0.726,0.244,0.726,0.734v24.305c0,5.83,3.77,9.475,8.867,9.475c5.223,0,8.993-3.645,8.993-9.475v-65.144   C172.157,256.841,168.387,253.19,163.164,253.19z"/><path class="st0" d="M235.249,253.923h-47.284c-5.46,0-8.993,3.282-8.993,8.023c0,4.615,3.533,7.897,8.993,7.897h13.978   c0.488,0,0.726,0.244,0.726,0.726v57.247c0,5.711,3.771,9.475,8.882,9.475c5.223,0,8.993-3.764,8.993-9.475v-57.247   c0-0.482,0.237-0.726,0.726-0.726h13.978c5.46,0,8.993-3.282,8.993-7.897C244.242,257.204,240.709,253.923,235.249,253.923z"/><path class="st0" d="M318.253,253.19c-5.348,0-8.267,2.919-10.934,9.238l-17.26,39.862h-0.489l-17.623-39.862   c-2.794-6.319-5.712-9.238-11.06-9.238c-5.948,0-9.845,4.134-9.845,10.697v64.781c0,5.467,3.408,8.623,8.268,8.623   c4.622,0,8.029-3.156,8.029-8.623v-39.868h0.6l12.89,29.653c2.541,5.837,4.608,7.541,8.742,7.541c4.133,0,6.2-1.704,8.756-7.541   l12.764-29.653h0.601v39.868c0,5.467,3.281,8.623,8.141,8.623c4.874,0,8.156-3.156,8.156-8.623v-64.781   C327.987,257.323,324.216,253.19,318.253,253.19z"/><path class="st0" d="M389.36,320.645h-29.408c-0.489,0-0.726-0.244-0.726-0.734v-57.24c0-5.712-3.77-9.482-8.867-9.482   c-5.237,0-8.993,3.77-8.993,9.482v64.899c0,5.349,3.518,8.993,8.993,8.993h39.002c5.475,0,8.994-3.282,8.994-8.022   C398.354,323.926,394.835,320.645,389.36,320.645z"/></g></svg>`},
 { name: 'Pointer', svg: `<svg  viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M3.3572 3.23397C3.66645 2.97447 4.1014 2.92638 4.45988 3.11204L20.7851 11.567C21.1426 11.7522 21.3542 12.1337 21.322 12.5351C21.2898 12.9364 21.02 13.2793 20.6375 13.405L13.7827 15.6586L10.373 22.0179C10.1828 22.3728 9.79826 22.5789 9.39743 22.541C8.9966 22.503 8.65762 22.2284 8.53735 21.8441L3.04564 4.29872C2.92505 3.91345 3.04794 3.49346 3.3572 3.23397ZM5.67123 5.99173L9.73507 18.9752L12.2091 14.361C12.3304 14.1347 12.5341 13.9637 12.7781 13.8835L17.7518 12.2484L5.67123 5.99173Z" fill="#000000"/></svg>` },
    { name: 'Rect Select', svg: `<svg fill="#000000"  viewBox="0 0 256 256" id="Flat" xmlns="http://www.w3.org/2000/svg"><path d="M144,48a4.0002,4.0002,0,0,1-4,4H116a4,4,0,0,1,0-8h24A4.0002,4.0002,0,0,1,144,48Zm-4,156H116a4,4,0,0,0,0,8h24a4,4,0,0,0,0-8ZM180,52h20a4.00458,4.00458,0,0,1,4,4V76a4,4,0,0,0,8,0V56a12.01375,12.01375,0,0,0-12-12H180a4,4,0,0,0,0,8Zm28,59.99951a4.0002,4.0002,0,0,0-4,4v24a4,4,0,0,0,8,0v-24A4.0002,4.0002,0,0,0,208,111.99951Zm-160,32a4.0002,4.0002,0,0,0,4-4v-24a4,4,0,1,0-8,0v24A4.0002,4.0002,0,0,0,48,143.99951ZM76,204H56a4.00458,4.00458,0,0,1-4-4V180a4,4,0,0,0-8,0v20a12.01375,12.01375,0,0,0,12,12H76a4,4,0,0,0,0-8ZM76,44H56A12.01375,12.01375,0,0,0,44,56V76a4,4,0,0,0,8,0V56a4.00458,4.00458,0,0,1,4-4H76a4,4,0,0,0,0-8ZM236,204H212V180a4,4,0,0,0-8,0v24H180a4,4,0,0,0,0,8h24v24a4,4,0,0,0,8,0V212h24a4,4,0,0,0,0-8Z"/></svg>` },
    { name: 'Ellipse Select', svg: `<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.0" viewBox="0 0 65 65" enable-background="new 0 0 24 24" xml:space="preserve"><g><ellipse fill="none" stroke="#000000" stroke-width="2" stroke-miterlimit="10" stroke-dasharray="4.0012,2.0006" cx="32" cy="32" rx="31" ry="20"/><polygon points="54,46 61,47 57,52" fill="#000000"/></g></svg>` },
    { name: 'Lasso', svg: `<svg xmlns="http://www.w3.org/2000/svg"  viewBox="0 0 24 24"><path d="M4.495 11.05a8.186 8.186 0 0 0 .695-3.067c.001-.027.006-.052.007-.078l.965.41a9.254 9.254 0 0 1-.648 2.888zm14.087-5.128l-.81.61a12.73 12.73 0 0 1 1.272 1.98l1-.307a13.602 13.602 0 0 0-1.462-2.283zm-4.224-2.13a8.128 8.128 0 0 1 2.02 1.285l.825-.62a9.226 9.226 0 0 0-2.6-1.648zm-4.541-.355a6.581 6.581 0 0 1 1.748-.237 6.919 6.919 0 0 1 .864.063l.245-.985a7.967 7.967 0 0 0-1.109-.078 7.501 7.501 0 0 0-2.023.276zM5.873 18.574a3.676 3.676 0 0 1-2.13-1.012L2.66 17.8a4.49 4.49 0 0 0 3.103 1.776zm-2.861-2.9c-.003-.058-.012-.11-.012-.17 0-.594.314-1.01.917-1.756.168-.208.349-.438.53-.682l-1.13-.169A4.135 4.135 0 0 0 2 15.504c0 .136.012.261.022.389zM6.534 6.3a4.422 4.422 0 0 1 1.458-1.97l-.29-1.016a5.53 5.53 0 0 0-2.078 2.599zm15.084 7.022a16.977 16.977 0 0 0-.788-3.266l-.974.299a16.1 16.1 0 0 1 .587 2.11zM18.757 17l2.189 4.515-2.894 1.456-2.266-4.621L13 22.17V9.51L23.266 17zm-1.597-1h3.038L14 11.478v7.624l1.954-2.68 2.552 5.201 1.11-.559zM11 18.854a8.011 8.011 0 0 0-2.454-.391c-.229 0-.444.011-.651.026l-.111 1.013c.243-.022.493-.039.763-.039a7.2 7.2 0 0 1 2.453.453z"/><path fill="none" d="M0 0h24v24H0z"/></svg>` },
    { name: 'Eyedropper', svg: `<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" fill="#000000"  version="1.1" id="Capa_1" viewBox="0 0 60 60" xml:space="preserve"><g><path d="M8.212,49.758c-0.391-0.391-1.023-0.391-1.414,0l-2.5,2.5c-0.856,0.855-1.328,1.995-1.328,3.207   c0,1.211,0.472,2.351,1.328,3.207S6.293,60,7.505,60c1.211,0,2.351-0.472,3.207-1.328c1.768-1.77,1.768-4.646,0-6.414L8.212,49.758   z"/><path d="M55.164,10.403c2.243-2.245,2.498-5.845,0.578-8.196C54.598,0.805,52.901,0,51.087,0c-1.606,0-3.112,0.622-4.242,1.751   l-3.526,3.527c-1.119,1.119-3.069,1.119-4.187,0l-0.583-0.583c-0.839-0.837-2.299-0.837-3.134,0.001L31.48,8.632   c-0.419,0.419-0.649,0.976-0.649,1.567c0,0.593,0.23,1.149,0.649,1.568l1.968,1.968L18.183,29l-0.999,0.999   c-1.562,1.562-2.727,3.501-3.395,5.688c-0.258,0.845-0.623,1.655-1.066,2.418c-0.028,0.048-0.048,0.099-0.076,0.146   c-0.022,0.036-0.05,0.069-0.072,0.105c-0.224,0.363-0.462,0.718-0.724,1.055c-0.289,0.37-0.6,0.723-0.932,1.055l-4.413,4.413   l5.656,5.656l4.375-4.374c1.354-1.353,3.037-2.355,4.87-2.898c1.289-0.383,2.501-0.979,3.618-1.721   c0.748-0.496,1.46-1.046,2.097-1.683L37.982,29h0l5.366-5.365l1.967,1.967c0.419,0.42,0.976,0.65,1.568,0.65   c0.592,0,1.148-0.23,1.567-0.649l3.936-3.936c0.864-0.864,0.864-2.271,0-3.136l-0.581-0.581c-0.56-0.56-0.867-1.303-0.867-2.094   s0.308-1.534,0.867-2.093L55.164,10.403z M35.153,29H21.011l13.851-13.851l7.071,7.071L35.153,29z"/></g></svg>` },
    { name: 'Paint Bucket', svg: `<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 17 17" version="1.1"><path d="M16.701 9.818l-8.868-8.924-0.134 0.133c-0.668-0.661-1.552-1.026-2.493-1.027 0 0 0 0-0.001 0-0.948 0-1.841 0.37-2.512 1.041-0.672 0.671-1.042 1.563-1.042 2.514 0 0.941 0.366 1.825 1.027 2.493l-2.208 2.209c-0.303 0.304-0.47 0.706-0.47 1.133 0 0.429 0.166 0.83 0.467 1.13l4.811 4.859c0.302 0.302 0.704 0.469 1.131 0.469 0.429 0 0.831-0.168 1.133-0.471l5.558-5.558 3.601-0.001zM2.651 3.554c0-0.682 0.266-1.323 0.749-1.806 0.483-0.482 1.123-0.748 1.805-0.748 0.001 0 0.001 0 0.001 0 0.674 0 1.306 0.262 1.786 0.734l-3.606 3.607c-0.473-0.481-0.735-1.113-0.735-1.787zM6.833 14.671c-0.113 0.113-0.265 0.177-0.425 0.177s-0.311-0.062-0.422-0.174l-3.636-3.674h8.154l-3.671 3.671zM11.504 10h-10.145l-0.183-0.186c-0.114-0.113-0.176-0.263-0.176-0.423 0-0.161 0.063-0.312 0.177-0.427l6.654-6.654 6.468 6.509-1.614 0.001-1.181 1.18zM15.688 11.959l-0.407-0.604-0.418 0.598c-0.319 0.457-1.363 2.011-1.363 2.798 0 0.965 0.785 1.75 1.75 1.75s1.75-0.786 1.75-1.751c0-0.782-1.004-2.334-1.312-2.791zM15.25 15.5c-0.413 0-0.75-0.337-0.75-0.75 0-0.24 0.349-0.92 0.766-1.591 0.4 0.67 0.734 1.349 0.734 1.591 0 0.413-0.337 0.75-0.75 0.75z" fill="#000000"/></svg>` },
    { name: 'Palette', svg: `<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" id="_x32_" viewBox="0 0 512 512" xml:space="preserve"><style type="text/css">.st0{fill:#000000;}</style><g><path class="st0" d="M231.137,410.58c-37.33,0-71.105-10.204-96.871-28.027c-25.832-17.955-43.85-43.075-50.826-74.464   c-2.002-9.037-2.971-18.214-2.971-27.447c0-30.676,10.785-62.316,30.481-90.672c-8.524-6.136-16.53-13.754-23.571-22.729   c-24.669,34.031-39.136,73.36-39.2,113.401c0,11.498,1.227,22.994,3.746,34.359c8.653,39.65,32.095,72.136,63.934,94.09   c31.903,21.96,72.073,33.779,115.277,33.779c23.506,0,47.982-3.488,72.588-10.848l-21.31-27.643   C264.913,408.58,247.671,410.58,231.137,410.58z"/><path class="st0" d="M452.068,133.078c-15.824-23.638-38.298-41.852-64.647-54.055c-26.412-12.21-56.637-18.473-88.41-18.536   c-24.54,0-50.05,3.746-75.558,11.56c-10.788,3.292-21.184,7.17-31.193,11.686c0.129,0.196,0.258,0.328,0.388,0.517   c6.328,8.912,11.431,18.34,15.048,27.838c8.072-3.488,16.467-6.528,25.12-9.17c22.54-6.849,44.885-10.142,66.195-10.142   c27.576,0,53.216,5.487,74.785,15.565c21.698,10.009,39.265,24.476,51.406,42.684c4.585,6.849,6.329,12.79,6.329,17.312   c-0.063,2.97-0.646,5.424-2.194,8.136c-1.164,2-2.907,4.2-5.62,6.395c-4.005,3.356-10.204,6.906-19.05,9.814   c-8.785,2.908-20.15,5.234-34.163,6.458c-16.792,1.425-30.805,7.555-40.558,17.242c-9.75,9.561-14.723,22.414-14.723,34.939   c0,13.755,5.812,27.384,16.533,37.329c10.655,10.009,26.091,16.013,43.914,15.95c1.097,0,2.194,0,3.358-0.062h0.129   c1.034-0.064,2.132-0.064,3.163-0.064c6.587,0,11.431,0.839,14.855,2c5.102,1.747,7.105,3.746,8.46,5.682   c1.29,1.936,2.066,4.522,2.066,7.624c0,2.384-0.451,4.907-1.227,6.969c-0.709,2.132-1.744,3.746-2.132,4.2   c-10.525,12.204-22.732,23.574-36.424,33.647l17.889,26.866c16.082-11.623,30.484-24.993,43.012-39.461   c3.68-4.326,6.266-9.233,8.202-14.594c1.807-5.423,2.97-11.302,2.97-17.627c0-5.493-0.905-11.371-3.1-17.116   c-3.292-8.652-9.946-16.984-19.438-22.344c-9.495-5.487-21.184-8.136-35.134-8.136c-1.486,0-3.034,0.063-4.714,0.126h-1.936   c-10.913-0.062-17.63-3.355-21.893-7.296c-4.26-4.006-6.2-8.975-6.263-13.692c0.063-4.326,1.549-8.394,5.165-12.008   c3.617-3.557,9.817-7.045,20.667-8.01c28.349-2.522,49.792-8.848,65.483-19.374c7.817-5.297,14.146-11.756,18.472-19.311   c4.39-7.492,6.521-15.95,6.521-24.281C463.82,155.744,459.235,143.799,452.068,133.078z"/><path class="st0" d="M393.485,176.72c5.291-5.298,8.325-12.607,8.325-20.093c0-7.486-3.034-14.802-8.325-20.1   c-5.298-5.285-12.608-8.318-20.093-8.318c-7.486,0-14.802,3.033-20.094,8.318c-5.291,5.298-8.324,12.613-8.324,20.1   c0,7.486,3.033,14.795,8.324,20.093c5.292,5.291,12.608,8.324,20.094,8.324C380.877,185.045,388.187,182.012,393.485,176.72z"/><path class="st0" d="M159.79,245.262c4.27-12.859-2.699-26.747-15.565-31.023c-12.859-4.27-26.747,2.692-31.022,15.558   c-4.27,12.859,2.699,26.747,15.565,31.029C141.62,265.09,155.514,258.128,159.79,245.262z"/><path class="st0" d="M160.137,342.631c8.823-9.327,8.413-24.041-0.908-32.864c-9.328-8.829-24.041-8.419-32.864,0.909   c-8.83,9.321-8.426,24.035,0.902,32.864C136.587,352.362,151.307,351.952,160.137,342.631z"/><path class="st0" d="M281.932,162.915c14.877-1.728,25.542-15.193,23.808-30.071c-1.728-14.878-15.193-25.536-30.071-23.808   c-14.884,1.728-25.542,15.187-23.808,30.071C253.589,153.985,267.048,164.649,281.932,162.915z"/><path class="st0" d="M99.435,151.078c15.133,21.096,36.721,35.172,56.348,36.762l0.823,0.075l36.85-26.438l0.195-0.801   c4.774-19.103-1.646-44.071-16.772-65.155c-14.357-20.004-31.076-33.728-47.253-47.01c-11.037-9.056-22.459-18.434-33.117-29.78   C87.685,9.334,84.715,4.692,84.705,4.68L81.845,0l-2.4,2.826c-11.14,13.156-15.593,36.869-12.238,65.048   C70.723,97.464,82.179,127.024,99.435,151.078z M107.649,116.056c12.018,13.598,17.631,4.692,10.4-9.17   c-9.079-17.388,0.097-18.012,5.682-12.601c5.566,5.392,12.541,17.476,18.548,14.014c3.61-2.081-0.268-9.568-5.38-20.913   c-2.933-6.496-0.4-16.24,14.701-3.236c5.515,5.544,10.747,11.523,15.619,18.309c10.563,14.707,15.564,32.428,13.121,46.329   l-31.55,22.642c-13.963-2.132-29.121-12.551-39.697-27.284c-4.049-5.651-7.761-11.768-11.078-18.201   c-0.356-0.921-0.763-1.904-1.236-2.946C91.51,111.402,95.632,102.472,107.649,116.056z"/><path class="st0" d="M215.431,183.86c-7.707-3.147-15.038-2.794-20.266,0.952l-16.993,12.197   c-5.235,3.746-7.909,10.589-7.408,18.888c0.511,8.306,4.156,17.363,10.078,25.05l26.851,34.813l52.614-37.746l-24.375-36.579   C230.551,193.351,223.137,187.007,215.431,183.86z"/><path class="st0" d="M268.971,251.026l-51.722,37.103l160.229,207.73c11.109,14.411,27.509,20.182,37.323,13.156l0.116-0.101   c9.807-7.032,9.586-24.42-0.501-39.562L268.971,251.026z"/></g></svg>` },
    { name: 'Text Tool', svg: `<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="butt" stroke-linejoin="miter"><path d="M6 4 L18 4"/><path d="M12 4 L12 20"/><path d="M6 20 L18 20"/></svg>` },
    { name: 'Zoom', svg: `<svg xmlns="http://www.w3.org/2000/svg"  viewBox="0 0 24 24" fill="none"><path d="M10 17C13.866 17 17 13.866 17 10C17 6.13401 13.866 3 10 3C6.13401 3 3 6.13401 3 10C3 13.866 6.13401 17 10 17Z" stroke="#000000" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/><path d="M20.9992 21L14.9492 14.95" stroke="#000000" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/></svg>` },
    { name: 'Zoom In', svg: `<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:sketch="http://www.bohemiancoding.com/sketch/ns" viewBox="0 0 32 32" version="1.1"><title>zoom-in</title><desc>Created with Sketch Beta.</desc><defs></defs><g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd" sketch:type="MSPage"><g id="Icon-Set" sketch:type="MSLayerGroup" transform="translate(-308.000000, -1139.000000)" fill="#000000"><path d="M321.46,1163.45 C315.17,1163.45 310.07,1158.44 310.07,1152.25 C310.07,1146.06 315.17,1141.04 321.46,1141.04 C327.75,1141.04 332.85,1146.06 332.85,1152.25 C332.85,1158.44 327.75,1163.45 321.46,1163.45 L321.46,1163.45 Z M339.688,1169.25 L331.429,1161.12 C333.592,1158.77 334.92,1155.67 334.92,1152.25 C334.92,1144.93 328.894,1139 321.46,1139 C314.026,1139 308,1144.93 308,1152.25 C308,1159.56 314.026,1165.49 321.46,1165.49 C324.672,1165.49 327.618,1164.38 329.932,1162.53 L338.225,1170.69 C338.629,1171.09 339.284,1171.09 339.688,1170.69 C340.093,1170.3 340.093,1169.65 339.688,1169.25 L339.688,1169.25 Z M326.519,1151.41 L322.522,1151.41 L322.522,1147.41 C322.522,1146.85 322.075,1146.41 321.523,1146.41 C320.972,1146.41 320.524,1146.85 320.524,1147.41 L320.524,1151.41 L316.529,1151.41 C315.978,1151.41 315.53,1151.59 315.53,1152.14 C315.53,1152.7 315.978,1153.41 316.529,1153.41 L320.524,1153.41 L320.524,1157.41 C320.524,1157.97 320.972,1158.41 321.523,1158.41 C322.075,1158.41 322.522,1157.97 322.522,1157.41 L322.522,1153.41 L326.519,1153.41 C327.07,1153.41 327.518,1152.96 327.518,1152.41 C327.518,1151.86 327.07,1151.41 326.519,1151.41 L326.519,1151.41 Z" id="zoom-in" sketch:type="MSShapeGroup"></path></g></g></svg>` },
    { name: 'Zoom Out', svg: `<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:sketch="http://www.bohemiancoding.com/sketch/ns" viewBox="0 0 32 32" version="1.1"><title>zoom-out</title><desc>Created with Sketch Beta.</desc><defs></defs><g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd" sketch:type="MSPage"><g id="Icon-Set" sketch:type="MSLayerGroup" transform="translate(-360.000000, -1139.000000)" fill="#000000"><path d="M373.46,1163.45 C367.17,1163.45 362.071,1158.44 362.071,1152.25 C362.071,1146.06 367.17,1141.04 373.46,1141.04 C379.75,1141.04 384.85,1146.06 384.85,1152.25 C384.85,1158.44 379.75,1163.45 373.46,1163.45 L373.46,1163.45 Z M391.688,1169.25 L383.429,1161.12 C385.592,1158.77 386.92,1155.67 386.92,1152.25 C386.92,1144.93 380.894,1139 373.46,1139 C366.026,1139 360,1144.93 360,1152.25 C360,1159.56 366.026,1165.49 373.46,1165.49 C376.672,1165.49 379.618,1164.38 381.932,1162.53 L390.225,1170.69 C390.629,1171.09 391.284,1171.09 391.688,1170.69 C392.093,1170.3 392.093,1169.65 391.688,1169.25 L391.688,1169.25 Z M378.689,1151.41 L368.643,1151.41 C368.102,1151.41 367.663,1151.84 367.663,1152.37 C367.663,1152.9 368.102,1153.33 368.643,1153.33 L378.689,1153.33 C379.23,1153.33 379.669,1152.9 379.669,1152.37 C379.669,1151.84 379.23,1151.41 378.689,1151.41 L378.689,1151.41 Z" id="zoom-out" sketch:type="MSShapeGroup"></path></g></g></svg>` },
    { name: 'Pan', svg: `<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"  viewBox="0 0 512 512" version="1.1"><title>pan</title><g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g id="drop" fill="#000000" transform="translate(42.666667, 42.666667)"><path d="M234.666667,256 L234.666667,341.333333 L277.333333,341.333333 L213.333333,426.666667 L149.333333,341.333333 L192,341.333333 L192,256 L234.666667,256 Z M341.333333,149.333333 L426.666667,213.333333 L341.333333,277.333333 L341.333333,234.666667 L256,234.666667 L256,192 L341.333333,192 L341.333333,149.333333 Z M85.3333333,149.333333 L85.3333333,192 L170.666667,192 L170.666667,234.666667 L85.3333333,234.666667 L85.3333333,277.333333 L3.55271368e-14,213.333333 L85.3333333,149.333333 Z M213.333333,3.55271368e-14 L277.333333,85.3333333 L234.666667,85.3333333 L234.666667,170.666667 L192,170.666667 L192,85.3333333 L149.333333,85.3333333 L213.333333,3.55271368e-14 Z" id="Combined-Shape"></path></g></g></svg>` },
    { name: 'Pen', svg: `<svg xmlns="http://www.w3.org/2000/svg"  viewBox="0 0 24 24" fill="none"><path d="M11 4H7.2C6.0799 4 5.51984 4 5.09202 4.21799C4.71569 4.40974 4.40973 4.7157 4.21799 5.09202C4 5.51985 4 6.0799 4 7.2V16.8C4 17.9201 4 18.4802 4.21799 18.908C4.40973 19.2843 4.71569 19.5903 5.09202 19.782C5.51984 20 6.0799 20 7.2 20H16.8C17.9201 20 18.4802 20 18.908 19.782C19.2843 19.5903 19.5903 19.2843 19.782 18.908C20 18.4802 20 17.9201 20 16.8V12.5M15.5 5.5L18.3284 8.32843M10.7627 10.2373L17.411 3.58902C18.192 2.80797 19.4584 2.80797 20.2394 3.58902C21.0205 4.37007 21.0205 5.6364 20.2394 6.41745L13.3774 13.2794C12.6158 14.0411 12.235 14.4219 11.8012 14.7247C11.4162 14.9936 11.0009 15.2162 10.564 15.3882C10.0717 15.582 9.54378 15.6885 8.48793 15.9016L8 16L8.04745 15.6678C8.21536 14.4925 8.29932 13.9048 8.49029 13.3561C8.65975 12.8692 8.89125 12.4063 9.17906 11.9786C9.50341 11.4966 9.92319 11.0768 10.7627 10.2373Z" stroke="#000000" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/></svg>` },
    { name: 'Gradient', svg: `<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" fill="#000000" version="1.1" id="Layer_1" viewBox="0 0 512 512" xml:space="preserve"><g><g><polygon points="444.082,193.31 396.495,145.7 396.495,177.633 67.918,177.633 67.918,208.98 396.495,208.98 396.495,240.909       "/></g></g><g><g><path d="M512,94.041H0v198.531h30.079L0,322.651v95.308h114.939v-95.308l-30.079-30.079h342.281l-30.079,30.079v95.308H512    v-95.308l-30.079-30.079H512V94.041z M83.592,386.612H31.347v-50.977l26.122-26.122l26.122,26.122V386.612z M480.653,386.612    h-52.245v-50.977l26.122-26.122l26.122,26.122V386.612z M480.653,261.224H31.347V125.388h449.306V261.224z"/></g></g></svg>` },
    { name: 'Crop', svg: `<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="square"><path d="M6 2 L6 6 L2 6"/><path d="M18 22 L18 18 L22 18"/><path d="M6 22 L6 18 L2 18"/><path d="M18 2 L18 6 L22 6"/></svg>` },
    { name: 'Artboard', svg: `<svg xmlns="http://www.w3.org/2000/svg"  viewBox="0 0 24 24"><g><path fill="none" d="M0 0h24v24H0z"/><path d="M8.586 17H3v-2h18v2h-5.586l3.243 3.243-1.414 1.414L13 17.414V20h-2v-2.586l-4.243 4.243-1.414-1.414L8.586 17zM5 3h14a1 1 0 0 1 1 1v10H4V4a1 1 0 0 1 1-1zm1 2v7h12V5H6z"/></g></svg>` },
    { name: 'Slice', svg: `<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><rect x="3" y="3" width="18" height="18"/><line x1="3" y1="12" x2="21" y2="12"/><line x1="12" y1="3" x2="12" y2="21"/></svg>` },
    { name: 'Transform', svg: `<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><rect x="4" y="4" width="16" height="16"/><circle cx="4" cy="4" r="2"/><circle cx="20" cy="4" r="2"/><circle cx="20" cy="20" r="2"/><circle cx="4" cy="20" r="2"/></svg>` },
    { name: 'Rotate', svg: `<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round"><path d="M4 12 A8 8 0 0 1 12 4"/><polyline points="14 2 12 4 16 4"/></svg>` },
    { name: 'Duplicate', svg: `<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><rect x="3" y="3" width="14" height="14"/><rect x="7" y="7" width="14" height="14"/></svg>` },
    { name: 'Lock', svg: `<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><rect x="5" y="11" width="14" height="10" rx="2"/><path d="M8 11 V7 a4 4 0 0 1 8 0 v4"/></svg>` },
    { name: 'Unlock', svg: `<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><rect x="5" y="11" width="14" height="10" rx="2"/><path d="M16 11 V7 a4 4 0 0 0-8 0"/></svg>` },
    { name: 'Show/Hide', svg: `<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M1 12 S5 4,12 4 s11 8,11 8 s-4 8-11 8 s-11-8-11-8 Z"/><circle cx="12" cy="12" r="3"/></svg>` },
    { name: 'Layers', svg: `<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><polygon points="12 2 2 7 12 12 22 7 12 2"/><polyline points="2 17 12 22 22 17"/><polyline points="2 12 12 17 22 12"/></svg>` },
    { name: 'Grid', svg: `<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1"><path d="M4 4 L20 4 M4 12 L20 12 M4 20 L24 24 M4 4 L4 20 M12 4 L12 20 M20 4 L24 24"/></svg>` },
    { name: 'Zoom Out', svg: `<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><circle cx="11" cy="11" r="8"/><line x1="21" y1="21" x2="16.65" y2="16.65"/><line x1="8" y1="11" x2="14" y2="11"/></svg>` },
    { name: 'Code View', svg: `<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><polyline points="16 18 22 12 16 6"/><polyline points="8 6 2 12 8 18"/></svg>` },
    {name:"bringtofront", svg: `<svg  viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M13 2C12.4477 2 12 2.44772 12 3C12 3.55228 12.4477 4 13 4H13.5C15.5185 4 17.339 5.21369 18.1154 7.07692L18.1886 7.25274L16.3511 6.56367C15.834 6.36975 15.2576 6.63176 15.0637 7.14888C14.8698 7.666 15.1318 8.24241 15.6489 8.43633L19.6489 9.93633C20.166 10.1302 20.7424 9.86824 20.9363 9.35112L22.4363 5.35112C22.6302 4.834 22.3682 4.25759 21.8511 4.06367C21.334 3.86975 20.7576 4.13176 20.5637 4.64888L19.951 6.2826C18.8583 3.68827 16.3168 2 13.5 2H13ZM2 8C2 6.89543 2.89543 6 4 6H12C12.5523 6 13 6.44772 13 7C13 7.55228 12.5523 8 12 8H4V16C4 16.5523 3.55228 17 3 17C2.44772 17 2 16.5523 2 16V8ZM6 12C6 10.8954 6.89543 10 8 10H16C17.1046 10 18 10.8954 18 12V20C18 21.1046 17.1046 22 16 22H8C6.89543 22 6 21.1046 6 20V12ZM16 12H8V20H16V12Z" fill="#000000"/></svg>`},
   {name:"sendtoback",svg:`<svg  viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M18.3137 0.918778C18.6347 1.36819 18.5307 1.99274 18.0812 2.31375L16.4248 3.49692L17.2572 3.67529C20.0236 4.26809 22 6.71287 22 9.5421V10C22 10.5523 21.5523 11 21 11C20.4477 11 20 10.5523 20 10V9.5421C20 7.65595 18.6824 6.02609 16.8381 5.63089L15.9784 5.44667L16.8682 7.00388C17.1423 7.48339 16.9757 8.09425 16.4961 8.36826C16.0166 8.64227 15.4058 8.47567 15.1318 7.99616L13.1318 4.49616C12.8771 4.05058 13.0012 3.48458 13.4188 3.18629L16.9188 0.686284C17.3682 0.365274 17.9927 0.469365 18.3137 0.918778ZM6 12C6 10.8954 6.89543 10 8 10H16C17.1046 10 18 10.8954 18 12V20C18 21.1046 17.1046 22 16 22H8C6.89543 22 6 21.1046 6 20V12ZM16 20V12H8V20H16ZM4 6.00002C2.89543 6.00002 2 6.89545 2 8.00002V16C2 16.5523 2.44772 17 3 17C3.55228 17 4 16.5523 4 16V8.00002H12C12.5523 8.00002 13 7.5523 13 7.00002C13 6.44773 12.5523 6.00002 12 6.00002H4Z" fill="#000000"/></svg>`},
  {name:"Cut",svg:`<svg  viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M5.36676 3.22604C5.79421 2.87631 6.42423 2.93932 6.77396 3.36676L12 9.75415L17.226 3.36676C17.5758 2.93932 18.2058 2.87631 18.6332 3.22604C19.0607 3.57577 19.1237 4.20579 18.774 4.63324L13.2921 11.3333L15.4739 14H16.5C18.433 14 20 15.567 20 17.5V18C20 19.6569 18.6569 21 17 21C15.3431 21 14 19.6569 14 18V15.357L12 12.9125L10 15.357V18C10 19.6569 8.65685 21 7 21C5.34315 21 4 19.6569 4 18V17.5C4 15.567 5.567 14 7.5 14H8.52612L10.7079 11.3333L5.22604 4.63324C4.87632 4.20579 4.93932 3.57577 5.36676 3.22604ZM8 16H7.5C6.67157 16 6 16.6716 6 17.5V18C6 18.5523 6.44772 19 7 19C7.55228 19 8 18.5523 8 18V16ZM16 16V18C16 18.5523 16.4477 19 17 19C17.5523 19 18 18.5523 18 18V17.5C18 16.6716 17.3284 16 16.5 16H16Z" fill="#000000"/></svg>`},
  {name:"Ccopy",svg:`<svg  viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" fill="none"><path fill="#000000" fill-rule="evenodd" d="M4 2a2 2 0 00-2 2v9a2 2 0 002 2h2v2a2 2 0 002 2h9a2 2 0 002-2V8a2 2 0 00-2-2h-2V4a2 2 0 00-2-2H4zm9 4V4H4v9h2V8a2 2 0 012-2h5zM8 8h9v9H8V8z"/></svg>`},
  {name:"Paste",svg:`<svg  viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M12 0C11.2347 0 10.6293 0.125708 10.1567 0.359214C9.9845 0.44429 9.82065 0.544674 9.68861 0.62717L9.59036 0.688808C9.49144 0.751003 9.4082 0.803334 9.32081 0.853848C9.09464 0.984584 9.00895 0.998492 9.00053 0.999859C8.99983 0.999973 9.00019 0.999859 9.00053 0.999859C7.89596 0.999859 7 1.89543 7 3H6C4.34315 3 3 4.34315 3 6V20C3 21.6569 4.34315 23 6 23H18C19.6569 23 21 21.6569 21 20V6C21 4.34315 19.6569 3 18 3H17C17 1.89543 16.1046 1 15 1C15.0003 1 15.0007 1.00011 15 1C14.9916 0.998633 14.9054 0.984584 14.6792 0.853848C14.5918 0.80333 14.5086 0.751004 14.4096 0.688804L14.3114 0.62717C14.1793 0.544674 14.0155 0.44429 13.8433 0.359214C13.3707 0.125708 12.7653 0 12 0ZM16.7324 5C16.3866 5.5978 15.7403 6 15 6H9C8.25972 6 7.61337 5.5978 7.26756 5H6C5.44772 5 5 5.44772 5 6V20C5 20.5523 5.44772 21 6 21H18C18.5523 21 19 20.5523 19 20V6C19 5.44772 18.5523 5 18 5H16.7324ZM11.0426 2.15229C11.1626 2.09301 11.4425 2 12 2C12.5575 2 12.8374 2.09301 12.9574 2.15229C13.0328 2.18953 13.1236 2.24334 13.2516 2.32333L13.3261 2.37008C13.43 2.43542 13.5553 2.51428 13.6783 2.58539C13.9712 2.75469 14.4433 3 15 3V4H9V3C9.55666 3 10.0288 2.75469 10.3217 2.58539C10.4447 2.51428 10.57 2.43543 10.6739 2.37008L10.7484 2.32333C10.8764 2.24334 10.9672 2.18953 11.0426 2.15229Z" fill="#0F0F0F"/>svg>`},
  {name:"Align Left",svg:`<svg  viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" fill="none"><path fill="#000000" fill-rule="evenodd" d="M18 5a1 1 0 100-2H2a1 1 0 000 2h16zm-8 4a1 1 0 100-2H2a1 1 0 100 2h8zm9 3a1 1 0 01-1 1H2a1 1 0 110-2h16a1 1 0 011 1zm-9 5a1 1 0 100-2H2a1 1 0 100 2h8z"/></svg>`},
  {name:"Align Right",svg:`<svg  viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" fill="none"><path fill="#000000" fill-rule="evenodd" d="M18 5a1 1 0 100-2H2a1 1 0 000 2h16zm0 4a1 1 0 100-2h-8a1 1 0 100 2h8zm1 3a1 1 0 01-1 1H2a1 1 0 110-2h16a1 1 0 011 1zm-1 5a1 1 0 100-2h-8a1 1 0 100 2h8z"/></svg>`},
  {name:"Align Center",svg:`<svg  viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" fill="none"><path fill="#000000" fill-rule="evenodd" d="M18 5a1 1 0 100-2H2a1 1 0 000 2h16zm-4 4a1 1 0 100-2H6a1 1 0 100 2h8zm5 3a1 1 0 01-1 1H2a1 1 0 110-2h16a1 1 0 011 1zm-5 5a1 1 0 100-2H6a1 1 0 100 2h8z"/></svg>`},
  {name:"Add",svg:`<svg  viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><title/><g id="Complete"><g id="add-square"><g><rect data-name="--Rectangle" fill="none" height="20" id="_--Rectangle" rx="2" ry="2" stroke="#000000" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" width="20" x="2" y="2"/><line fill="none" stroke="#000000" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" x1="15.5" x2="8.5" y1="12" y2="12"/><line fill="none" stroke="#000000" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" x1="12" x2="12" y1="15.5" y2="8.5"/></g></g></g></svg>`},
  {name:"Remove",svg:`<svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><title>i</title><g id="Complete"><g id="remove-square"><g><rect id="_--Rectangle" data-name="--Rectangle" x="2" y="2" width="20" height="20" rx="2" ry="2" fill="none" stroke="#000000" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"/><line x1="15.5" y1="12" x2="8.5" y2="12" fill="none" stroke="#000000" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"/></g></g></g></svg>`},
   {name:"Resize",svg:`<svg xmlns="http://www.w3.org/2000/svg"  viewBox="0 0 24 24" fill="none"><g clip-path="url(#clip0_15_784)"><rect width="24" height="24" fill="white"/><path d="M13.8284 13.8284L20.8995 20.8995M20.8995 20.8995L20.7816 15.1248M20.8995 20.8995L15.1248 20.7816" stroke="#000000" stroke-linecap="round" stroke-linejoin="round"/><path d="M9.89948 13.8284L2.82841 20.8995M2.82841 20.8995L8.60312 20.7816M2.82841 20.8995L2.94626 15.1248" stroke="#000000" stroke-linecap="round" stroke-linejoin="round"/><path d="M13.8284 9.8995L20.8995 2.82843M20.8995 2.82843L15.1248 2.94629M20.8995 2.82843L20.7816 8.60314" stroke="#000000" stroke-linecap="round" stroke-linejoin="round"/><path d="M9.89947 9.89951L2.8284 2.82844M2.8284 2.82844L2.94626 8.60315M2.8284 2.82844L8.60311 2.94629" stroke="#000000" stroke-linecap="round" stroke-linejoin="round"/></g><defs><clipPath id="clip0_15_784"><rect width="24" height="24" fill="white"/></clipPath></defs></svg>`},  
   {name:"Move",svg:`<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" id="Uploaded to svgrepo.com"  viewBox="0 0 32 32" xml:space="preserve"><style type="text/css">	.puchipuchi_een{fill:#111918;}</style><path class="puchipuchi_een" d="M19.707,26.293c0.391,0.391,0.391,1.023,0,1.414l-3,3C16.512,30.902,16.256,31,16,31  s-0.512-0.098-0.707-0.293l-3-3c-0.391-0.391-0.391-1.023,0-1.414s1.023-0.391,1.414,0L15,27.586V23c0-0.552,0.448-1,1-1  s1,0.448,1,1v4.586l1.293-1.293C18.684,25.902,19.316,25.902,19.707,26.293z M16,11c-2.761,0-5,2.239-5,5s2.239,5,5,5s5-2.239,5-5  S18.761,11,16,11z M13.707,5.707L15,4.414V9c0,0.552,0.448,1,1,1s1-0.448,1-1V4.414l1.293,1.293c0.391,0.391,1.023,0.391,1.414,0  s0.391-1.023,0-1.414l-3-3C16.512,1.098,16.256,1,16,1s-0.512,0.098-0.707,0.293l-3,3c-0.391,0.391-0.391,1.023,0,1.414  S13.316,6.098,13.707,5.707z M30.707,15.293l-3-3c-0.391-0.391-1.023-0.391-1.414,0s-0.391,1.023,0,1.414L27.586,15H23  c-0.552,0-1,0.448-1,1s0.448,1,1,1h4.586l-1.293,1.293c-0.391,0.391-0.391,1.023,0,1.414s1.023,0.391,1.414,0l3-3  C30.902,16.512,31,16.256,31,16S30.902,15.488,30.707,15.293z M9,15H4.414l1.293-1.293c0.391-0.391,0.391-1.023,0-1.414  s-1.023-0.391-1.414,0l-3,3C1.098,15.488,1,15.744,1,16s0.098,0.512,0.293,0.707l3,3c0.391,0.391,1.023,0.391,1.414,0  s0.391-1.023,0-1.414L4.414,17H9c0.552,0,1-0.448,1-1S9.552,15,9,15z"/></svg>`},  
  {name:"Dragable",svg:`<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" id="Layer_1"  viewBox="0 0 32 32" enable-background="new 0 0 32 32" xml:space="preserve"><g>	<path fill="#808184" d="M0,1.5v29C0,31.327,0.673,32,1.5,32h29c0.827,0,1.5-0.673,1.5-1.5V13c0-0.276-0.224-0.5-0.5-0.5   S31,12.724,31,13v17.5c0,0.276-0.224,0.5-0.5,0.5h-29C1.224,31,1,30.776,1,30.5v-29C1,1.224,1.224,1,1.5,1H18   c0.276,0,0.5-0.224,0.5-0.5S18.276,0,18,0H1.5C0.673,0,0,0.673,0,1.5z"/>	<path fill="#808184" d="M32,0.5C32,0.224,31.776,0,31.5,0H23c-0.276,0-0.5,0.224-0.5,0.5S22.724,1,23,1h7.197L19.301,11.896   c-0.076,0.076-0.113,0.171-0.13,0.269C18.968,12.063,18.742,12,18.5,12h-5c-0.827,0-1.5,0.673-1.5,1.5v5c0,0.827,0.673,1.5,1.5,1.5   h5c0.827,0,1.5-0.673,1.5-1.5v-5c0-0.284-0.084-0.547-0.222-0.774c0.084-0.022,0.164-0.057,0.23-0.122L31,1.611V8   c0,0.276,0.224,0.5,0.5,0.5S32,8.276,32,8V0.5z M19,18.5c0,0.276-0.224,0.5-0.5,0.5h-5c-0.276,0-0.5-0.224-0.5-0.5v-5   c0-0.276,0.224-0.5,0.5-0.5h5c0.276,0,0.5,0.224,0.5,0.5V18.5z"/></g></svg>`},
{name:"Dockable",svg:`<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" id="Layer_1"  viewBox="0 0 32 32" enable-background="new 0 0 32 32" xml:space="preserve"><g>	<path fill="#808184" d="M25.5,8h5C31.327,8,32,7.327,32,6.5v-5C32,0.673,31.327,0,30.5,0h-5C24.673,0,24,0.673,24,1.5v5   c0,0.24,0.062,0.464,0.163,0.665L13,19.258V12c0-0.276-0.224-0.5-0.5-0.5S12,11.724,12,12v8.5c0,0.276,0.224,0.5,0.5,0.5H20   c0.276,0,0.5-0.224,0.5-0.5S20.276,20,20,20h-6.324L24.88,7.862C25.07,7.949,25.278,8,25.5,8z M25,1.5C25,1.224,25.224,1,25.5,1h5   C30.776,1,31,1.224,31,1.5v5C31,6.776,30.776,7,30.5,7h-5C25.224,7,25,6.776,25,6.5V1.5z"/>	<path fill="#808184" d="M1.5,32h29c0.827,0,1.5-0.673,1.5-1.5V13c0-0.276-0.224-0.5-0.5-0.5S31,12.724,31,13v17.5   c0,0.276-0.224,0.5-0.5,0.5h-29C1.224,31,1,30.776,1,30.5v-29C1,1.224,1.224,1,1.5,1H19c0.276,0,0.5-0.224,0.5-0.5S19.276,0,19,0   H1.5C0.673,0,0,0.673,0,1.5v29C0,31.327,0.673,32,1.5,32z"/></g></svg>`},
{name:"DragDots",svg:`<svg xmlns="http://www.w3.org/2000/svg" fill="#000000" width="800px" height="800px" viewBox="0 0 16 16"><path fill-rule="evenodd" d="M7.375 3.67c0-.645-.56-1.17-1.25-1.17s-1.25.525-1.25 1.17c0 .646.56 1.17 1.25 1.17s1.25-.524 1.25-1.17zm0 8.66c0-.646-.56-1.17-1.25-1.17s-1.25.524-1.25 1.17c0 .645.56 1.17 1.25 1.17s1.25-.525 1.25-1.17zm-1.25-5.5c.69 0 1.25.525 1.25 1.17 0 .645-.56 1.17-1.25 1.17S4.875 8.645 4.875 8c0-.645.56-1.17 1.25-1.17zm5-3.16c0-.645-.56-1.17-1.25-1.17s-1.25.525-1.25 1.17c0 .646.56 1.17 1.25 1.17s1.25-.524 1.25-1.17zm-1.25 7.49c.69 0 1.25.524 1.25 1.17 0 .645-.56 1.17-1.25 1.17s-1.25-.525-1.25-1.17c0-.646.56-1.17 1.25-1.17zM11.125 8c0-.645-.56-1.17-1.25-1.17s-1.25.525-1.25 1.17c0 .645.56 1.17 1.25 1.17s1.25-.525 1.25-1.17z"/></svg>`},
{name:"Disable",svg:`<svg xmlns="http://www.w3.org/2000/svg"  viewBox="0 0 512 512">  <path fill="var(--ci-primary-color, #000000)" d="M368,128H144a128,128,0,0,0,0,256H368a128,128,0,0,0,0-256Zm0,224H144a96,96,0,0,1,0-192H368a96,96,0,0,1,0,192Z" class="ci-primary"/>  <path fill="var(--ci-primary-color, #000000)" d="M144,192a64,64,0,1,0,64,64A64.072,64.072,0,0,0,144,192Zm0,96a32,32,0,1,1,32-32A32.036,32.036,0,0,1,144,288Z" class="ci-primary"/></svg>`},
{name:"Enable",svg:`<svg xmlns="http://www.w3.org/2000/svg"  viewBox="0 0 24 24" fill="none"><path fill-rule="evenodd" clip-rule="evenodd" d="M16.5455 6H7.45455C4.44545 6 2 8.69 2 12C2 15.31 4.44545 18 7.45455 18H16.5455C19.5545 18 22 15.31 22 12C22 8.69 19.5545 6 16.5455 6ZM16.4444 16H7.55556C5.59111 16 4 14.21 4 12C4 9.79 5.59111 8 7.55556 8H16.4444C18.4089 8 20 9.79 20 12C20 14.21 18.4089 16 16.4444 16ZM13 12C13 10.34 14.34 9 16 9C17.66 9 19 10.34 19 12C19 13.66 17.66 15 16 15C14.34 15 13 13.66 13 12Z" fill="#000000"/></svg>`},
{name:"Desktop_Mobile",svg:`<svg viewBox="0 0 200 200" xmlns="http://www.w3.org/2000/svg"><rect x="0" y="0" fill="none" stroke="black" stroke-width="2"/><rect x="15" y="15" width="125" height="88" fill="#e0e0e0" stroke="#333" stroke-width="2"/><rect x="66" y="103" width="23" height="13" fill="#999"/><rect x="60" y="116" width="34" height="8" fill="#999"/><rect x="117" y="46" width="68" height="139" rx="8" ry="8" fill="#e0e0e0" stroke="#333" stroke-width="2"/><rect x="126" y="56" width="50" height="114" fill="#fff"/><circle cx="151" cy="179" r="4" fill="#333"/></svg>`},

];

  // HTML element icon mapping
  const elementIcons = {
    html: `<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M4 4h16v16H4z"/></svg>`,
    head: `<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><circle cx="12" cy="7" r="3"/><path d="M5 20c0-4 3-6 7-6s7 2 7 6"/></svg>`,
    body: `<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><rect x="2" y="2" width="20" height="20" rx="2"/></svg>`,
    header: `<svg xmlns="http://www.w3.org/2000/svg" fill="#000000"  viewBox="0 0 1920 1920"> <path fill-rule="evenodd" clip-rule="evenodd" d="M0 213.333C0 95.5126 95.5126 0 213.333 0H1706.67C1824.49 0 1920 95.5126 1920 213.333V1706.67C1920 1824.49 1824.49 1920 1706.67 1920H213.333C95.5126 1920 0 1824.49 0 1706.67V213.333ZM213.333 106.667C154.423 106.667 106.667 154.423 106.667 213.333V1706.67C106.667 1765.58 154.423 1813.33 213.333 1813.33H1706.67C1765.58 1813.33 1813.33 1765.58 1813.33 1706.67V213.333C1813.33 154.423 1765.58 106.667 1706.67 106.667H213.333ZM266.667 746.667C237.211 746.667 213.333 722.788 213.333 693.333V373.333C213.333 343.878 237.211 320 266.667 320H1653.33C1682.79 320 1706.67 343.878 1706.67 373.333V693.333C1706.67 722.788 1682.79 746.667 1653.33 746.667H266.667ZM346.667 426.667C331.939 426.667 320 438.606 320 453.333V613.333C320 628.061 331.939 640 346.667 640H1573.33C1588.06 640 1600 628.061 1600 613.333V453.333C1600 438.606 1588.06 426.667 1573.33 426.667H346.667Z"/></svg>`,
    nav: `<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><line x1="3" y1="6" x2="21" y2="6"/><line x1="3" y1="12" x2="21" y2="12"/><line x1="3" y1="18" x2="21" y2="18"/></svg>`,
    main: `<svg xmlns="http://www.w3.org/2000/svg"  viewBox="0 0 24 24" fill="none"><path d="M20.95 14.55L14.56 20.94C13.16 22.34 10.86 22.34 9.45002 20.94L3.06001 14.55C1.66001 13.15 1.66001 10.85 3.06001 9.44001L9.45002 3.05C10.85 1.65 13.15 1.65 14.56 3.05L20.95 9.44001C22.35 10.85 22.35 13.15 20.95 14.55Z" stroke="#292D32" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/><path d="M6.25 6.25L17.75 17.75" stroke="#292D32" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/><path d="M17.75 6.25L6.25 17.75" stroke="#292D32" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/></svg>`,
    section: `<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M4 4h16v6H4z"/><path d="M4 14h16v6H4z"/></svg>`,
    article: `<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><rect x="4" y="4" width="16" height="16"/><line x1="8" y1="8" x2="16" y2="8"/><line x1="8" y1="12" x2="16" y2="12"/></svg>`,
    aside: `<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><rect x="4" y="4" width="6" height="16"/><rect x="14" y="4" width="6" height="16"/></svg>`,
    footer: `<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M2 18h20"/><path d="M6 14h12"/></svg>`,
    div: `<svg  viewBox="0 0 64 64" xmlns="http://www.w3.org/2000/svg" role="img" aria-label="div element icon"><rect x="4" y="12" width="56" height="40" rx="6" ry="6" fill="none" stroke="#000000" stroke-width="4"/><text x="32" y="41" font-family="monospace" font-size="20" text-anchor="middle" fill="#000000">div</text></svg>`,
    span: `<svg  viewBox="0 0 64 64" xmlns="http://www.w3.org/2000/svg" role="img" aria-label="span element icon"><rect x="4" y="12" width="56" height="40" rx="6" ry="6" fill="none" stroke="#000000" stroke-width="4" stroke-dasharray="6 5"/><text x="32" y="41" font-family="monospace" font-size="20" text-anchor="middle" fill="#000000">span</text></svg>`,
    p: `<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M6 4v16a4 4 0 0 0 8 0v-8h2"/></svg>`,
    a: `<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M10 14a2 2 0 0 1 0-4h4"/><path d="M14 10a2 2 0 0 1 0 4H10"/></svg>`,
    ul: `<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><circle cx="6" cy="6" r="2"/><circle cx="6" cy="12" r="2"/><circle cx="6" cy="18" r="2"/><path d="M10 6h10M10 12h10M10 18h10"/></svg>`,
    li: `<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><circle cx="6" cy="6" r="2"/><path d="M10 6h10"/></svg>`,
    img: `<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><rect x="3" y="3" width="18" height="18"/><circle cx="8" cy="8" r="2"/><polyline points="21 15 16 10 5 21"/></svg>`,
    button: `<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><rect x="3" y="7" width="18" height="10" rx="2"/><line x1="7" y1="12" x2="17" y2="12"/></svg>`,
    input: `<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><rect x="3" y="7" width="18" height="10" rx="2"/><line x1="8" y1="12" x2="16" y2="12"/></svg>`
  };
  const formElementIcons = {
    form: `<svg viewBox="0 0 64 64"><rect x="4" y="12" width="56" height="40" rx="6" fill="none" stroke="#000" stroke-width="4"/><text x="32" y="41" font-family="monospace" font-size="20" text-anchor="middle" fill="#000">form</text></svg>`,
    label: `<svg viewBox="0 0 64 64"><rect x="4" y="12" width="56" height="40" fill="none" stroke="#000" stroke-width="4"/><text x="32" y="41" font-family="monospace" font-size="18" text-anchor="middle" fill="#000">label</text></svg>`,
    input: `<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><rect x="3" y="7" width="18" height="10" rx="2"/><line x1="8" y1="12" x2="16" y2="12"/></svg>`,
    textarea: `<svg viewBox="0 0 64 64"><rect x="4" y="12" width="56" height="40" fill="none" stroke="#000" stroke-width="4"/><line x1="12" y1="22" x2="52" y2="22" stroke="#000" stroke-width="2"/><line x1="12" y1="32" x2="52" y2="32" stroke="#000" stroke-width="2"/><line x1="12" y1="42" x2="52" y2="42" stroke="#000" stroke-width="2"/></svg>`,
    button: `<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><rect x="3" y="7" width="18" height="10" rx="2"/><line x1="7" y1="12" x2="17" y2="12"/></svg>`,
    select: `<svg viewBox="0 0 64 64"><rect x="4" y="12" width="56" height="40" fill="none" stroke="#000" stroke-width="4"/><polygon points="48,26 40,38 56,38" fill="#000"/></svg>`,
    option: `<svg viewBox="0 0 64 64"><rect x="4" y="12" width="56" height="40" fill="none" stroke="#000" stroke-width="4"/><circle cx="16" cy="32" r="6" fill="#000"/><line x1="28" y1="32" x2="48" y2="32" stroke="#000" stroke-width="4"/></svg>`,
    fieldset: `<svg viewBox="0 0 64 64"><rect x="6" y="16" width="52" height="36" fill="none" stroke="#000" stroke-width="4"/><rect x="18" y="10" width="28" height="12" fill="#fff" stroke="#000" stroke-width="4"/></svg>`,
    legend: `<svg viewBox="0 0 64 64"><rect x="4" y="20" width="56" height="32" fill="none" stroke="#000" stroke-width="4"/><rect x="20" y="14" width="24" height="12" fill="#fff" stroke="#000" stroke-width="4"/></svg>`
  };
  const textFormattingElementIcons = {
    b: `<svg viewBox=\"0 0 64 64\"><rect x=\"4\" y=\"12\" width=\"56\" height=\"40\" fill=\"none\" stroke=\"#000\" stroke-width=\"4\"/><text x=\"32\" y=\"41\" font-family=\"monospace\" font-size=\"22\" font-weight=\"bold\" text-anchor=\"middle\" fill=\"#000\">B</text></svg>`,
    i: `<svg viewBox=\"0 0 64 64\"><rect x=\"4\" y=\"12\" width=\"56\" height=\"40\" fill=\"none\" stroke=\"#000\" stroke-width=\"4\"/><text x=\"32\" y=\"41\" font-family=\"monospace\" font-size=\"22\" font-style=\"italic\" text-anchor=\"middle\" fill=\"#000\">I</text></svg>`,
    u: `<svg viewBox=\"0 0 64 64\"><rect x=\"4\" y=\"12\" width=\"56\" height=\"40\" fill=\"none\" stroke=\"#000\" stroke-width=\"4\"/><text x=\"32\" y=\"41\" font-family=\"monospace\" font-size=\"22\" text-decoration=\"underline\" text-anchor=\"middle\" fill=\"#000\">U</text></svg>`,
    strong: `<svg viewBox=\"0 0 64 64\"><rect x=\"4\" y=\"12\" width=\"56\" height=\"40\" fill=\"none\" stroke=\"#000\" stroke-width=\"4\"/><text x=\"32\" y=\"41\" font-family=\"monospace\" font-size=\"20\" font-weight=\"bold\" text-anchor=\"middle\" fill=\"#000\">strong</text></svg>`,
    em: `<svg viewBox=\"0 0 64 64\"><rect x=\"4\" y=\"12\" width=\"56\" height=\"40\" fill=\"none\" stroke=\"#000\" stroke-width=\"4\"/><text x=\"32\" y=\"41\" font-family=\"monospace\" font-size=\"20\" font-style=\"italic\" text-anchor=\"middle\" fill=\"#000\">em</text></svg>`,
    mark: `<svg viewBox=\"0 0 64 64\"><rect x=\"4\" y=\"12\" width=\"56\" height=\"40\" fill=\"yellow\" stroke=\"#000\" stroke-width=\"4\"/><text x=\"32\" y=\"41\" font-family=\"monospace\" font-size=\"20\" text-anchor=\"middle\" fill=\"#000\">mark</text></svg>`,
    small: `<svg viewBox=\"0 0 64 64\"><rect x=\"4\" y=\"12\" width=\"56\" height=\"40\" fill=\"none\" stroke=\"#000\" stroke-width=\"4\"/><text x=\"32\" y=\"41\" font-family=\"monospace\" font-size=\"14\" text-anchor=\"middle\" fill=\"#000\">small</text></svg>`,
    del: `<svg viewBox=\"0 0 64 64\"><rect x=\"4\" y=\"12\" width=\"56\" height=\"40\" fill=\"none\" stroke=\"#000\" stroke-width=\"4\"/><line x1=\"12\" y1=\"32\" x2=\"52\" y2=\"32\" stroke=\"#000\" stroke-width=\"3\"/><text x=\"32\" y=\"41\" font-family=\"monospace\" font-size=\"20\" text-anchor=\"middle\" fill=\"#000\">del</text></svg>`,
    ins: `<svg viewBox=\"0 0 64 64\"><rect x=\"4\" y=\"12\" width=\"56\" height=\"40\" fill=\"none\" stroke=\"#000\" stroke-width=\"4\"/><line x1=\"12\" y1=\"42\" x2=\"52\" y2=\"42\" stroke=\"#000\" stroke-width=\"3\"/><text x=\"32\" y=\"35\" font-family=\"monospace\" font-size=\"20\" text-anchor=\"middle\" fill=\"#000\">ins</text></svg>`,
    header: `<svg viewBox=\"0 0 64 64\"><rect x=\"4\" y=\"8\" width=\"56\" height=\"16\" fill=\"none\" stroke=\"#000\" stroke-width=\"4\"/></svg>`,
  footer: `<svg viewBox=\"0 0 64 64\"><rect x=\"4\" y=\"40\" width=\"56\" height=\"16\" fill=\"none\" stroke=\"#000\" stroke-width=\"4\"/></svg>`,
  nav: `<svg viewBox=\"0 0 64 64\"><rect x=\"4\" y=\"12\" width=\"56\" height=\"8\" fill=\"none\" stroke=\"#000\" stroke-width=\"4\"/><rect x=\"4\" y=\"24\" width=\"56\" height=\"8\" fill=\"none\" stroke=\"#000\" stroke-width=\"4\"/><rect x=\"4\" y=\"36\" width=\"56\" height=\"8\" fill=\"none\" stroke=\"#000\" stroke-width=\"4\"/></svg>`,
  main: `<svg viewBox=\"0 0 64 64\"><rect x=\"12\" y=\"12\" width=\"40\" height=\"40\" fill=\"none\" stroke=\"#000\" stroke-width=\"4\"/></svg>`,
  section: `<svg viewBox=\"0 0 64 64\"><rect x=\"4\" y=\"12\" width=\"56\" height=\"16\" fill=\"none\" stroke=\"#000\" stroke-width=\"4\"/><rect x=\"4\" y=\"36\" width=\"56\" height=\"16\" fill=\"none\" stroke=\"#000\" stroke-width=\"4\"/></svg>`,
  article: `<svg viewBox=\"0 0 64 64\"><rect x=\"8\" y=\"8\" width=\"48\" height=\"48\" fill=\"none\" stroke=\"#000\" stroke-width=\"4\"/><line x1=\"16\" y1=\"20\" x2=\"48\" y2=\"20\" stroke=\"#000\" stroke-width=\"2\"/><line x1=\"16\" y1=\"32\" x2=\"48\" y2=\"32\" stroke=\"#000\" stroke-width=\"2\"/><line x1=\"16\" y1=\"44\" x2=\"48\" y2=\"44\" stroke=\"#000\" stroke-width=\"2\"/></svg>`,
  aside: `<svg viewBox=\"0 0 64 64\"><rect x=\"40\" y=\"12\" width=\"20\" height=\"40\" fill=\"none\" stroke=\"#000\" stroke-width=\"4\"/><rect x=\"4\" y=\"12\" width=\"32\" height=\"40\" fill=\"none\" stroke=\"#000\" stroke-width=\"4\" stroke-dasharray=\"4 4\"/></svg>`,
  div: `<svg viewBox=\"0 0 64 64\"><rect x=\"4\" y=\"12\" width=\"56\" height=\"40\" rx=\"6\" fill=\"none\" stroke=\"#000\" stroke-width=\"4\"/><text x=\"32\" y=\"41\" font-family=\"monospace\" font-size=\"20\" text-anchor=\"middle\" fill=\"#000\">div</text></svg>`,
  span: `<svg viewBox=\"0 0 64 64\"><rect x=\"4\" y=\"12\" width=\"56\" height=\"40\" rx=\"6\" fill=\"none\" stroke=\"#000\" stroke-width=\"4\" stroke-dasharray=\"6 5\"/><text x=\"32\" y=\"41\" font-family=\"monospace\" font-size=\"20\" text-anchor=\"middle\" fill=\"#000\">span</text></svg>`,
  p: `<svg viewBox=\"0 0 64 64\"><rect x=\"8\" y=\"16\" width=\"48\" height=\"32\" fill=\"none\" stroke=\"#000\" stroke-width=\"4\"/><line x1=\"16\" y1=\"26\" x2=\"48\" y2=\"26\" stroke=\"#000\" stroke-width=\"3\"/><line x1=\"16\" y1=\"34\" x2=\"48\" y2=\"34\" stroke=\"#000\" stroke-width=\"3\"/><line x1=\"16\" y1=\"42\" x2=\"36\" y2=\"42\" stroke=\"#000\" stroke-width=\"3\"/></svg>`
};
// HTML tag definitions extended with SVG icons
// -------------------------------------------------

// 1. Metadata Tags
const metadataTags = {
  "!DOCTYPE": { parentTag: null, title: "Document Type Declaration", description: "Declares the document as HTML5.", icon: `<svg width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M2 4h20v2H2V4zm0 12h20v2H2v-2zM2 9h20v2H2V9z" fill="currentColor"/></svg>` },
  "html":     { parentTag: null, title: "HTML Root", description: "The root element that wraps the entire HTML document.", icon: `<svg width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="2" fill="none"/><text x="12" y="16" text-anchor="middle" font-size="10" fill="currentColor">HTML</text></svg>` },
  "head":     { parentTag: "html", title: "Head Section", description: "Contains metadata and links to external resources.", icon: `<svg width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><rect x="4" y="4" width="16" height="6" stroke="currentColor" stroke-width="2" fill="none"/><line x1="4" y1="12" x2="20" y2="12" stroke="currentColor" stroke-width="2"/></svg>` },
  "meta":     { parentTag: "head", title: "Metadata", description: "Defines metadata like character set, viewport, or description.", icon: `<svg width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><circle cx="12" cy="8" r="2" fill="currentColor"/><rect x="6" y="12" width="12" height="6" rx="1" fill="currentColor"/></svg>` },
  "title":    { parentTag: "head", title: "Page Title", description: "Sets the title of the page, displayed in the browser tab.", icon: `<svg width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M4 6h16v2H4V6zm0 4h10v2H4v-2zm0 4h16v2H4v-2z" fill="currentColor"/></svg>` },
  "link":     { parentTag: "head", title: "External Resource Link", description: "Links external resources such as stylesheets.", icon: `<svg width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M10 14l-4-4 4-4" stroke="currentColor" stroke-width="2" fill="none"/><path d="M14 10l4 4-4 4" stroke="currentColor" stroke-width="2" fill="none"/><line x1="8" y1="12" x2="16" y2="12" stroke="currentColor" stroke-width="2"/></svg>` },
  "style":    { parentTag: "head", title: "Internal CSS", description: "Defines internal CSS styles.", icon: `<svg width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><rect x="5" y="4" width="14" height="16" stroke="currentColor" stroke-width="2" fill="none"/><path d="M8 8h8M8 12h8M8 16h8" stroke="currentColor" stroke-width="2"/></svg>` },
  "script":   { parentTag: ["head","body"], title: "Script", description: "Includes or links to JavaScript code.", icon: `<svg width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M8 4h8l-4 16H8l4-16z" stroke="currentColor" stroke-width="2" fill="none"/><text x="12" y="18" text-anchor="middle" font-size="8" fill="currentColor">JS</text></svg>` },
  "base":     { parentTag: "head", title: "Base URL", description: "Specifies the base URL for all relative URLs in the page.", icon: `<svg width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><circle cx="12" cy="12" r="8" stroke="currentColor" stroke-width="2" fill="none"/><path d="M8 12h8" stroke="currentColor" stroke-width="2"/><path d="M12 8v8" stroke="currentColor" stroke-width="2"/></svg>` }
};

// 2. Layout & Semantic Tags
const layoutTags = {
  "body":    { parentTag: "html", title: "Body",    description: "Contains the visible content of the web page.", icon: `<svg width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><rect x="2" y="2" width="20" height="20" stroke="currentColor" stroke-width="2" fill="none"/><text x="12" y="16" text-anchor="middle" font-size="8" fill="currentColor">BODY</text></svg>` },
  "header":  { parentTag: "body", title: "Header",  description: "Represents introductory content or a set of navigational links.", icon: `<svg width="24" height="24" viewBox="0 0 24 24"><rect x="2" y="2" width="20" height="6" stroke="currentColor" stroke-width="2" fill="none"/><text x="12" y="12" text-anchor="middle" font-size="8">HDR</text></svg>` },
  "nav":     { parentTag: "body", title: "Navigation", description: "Defines a set of navigation links.", icon: `<svg width="24" height="24" viewBox="0 0 24 24"><path d="M4 12h16M12 4l8 8-8 8" stroke="currentColor" stroke-width="2" fill="none"/><text x="12" y="22" text-anchor="middle" font-size="6">NAV</text></svg>` },
  "main":    { parentTag: "body", title: "Main Content", description: "Specifies the main content area of the document.", icon: `<svg width="24" height="24" viewBox="0 0 24 24"><rect x="4" y="4" width="16" height="16" stroke="currentColor" stroke-width="2" fill="none"/><text x="12" y="18" text-anchor="middle" font-size="8">MAIN</text></svg>` },
  "section": { parentTag: "body", title: "Section", description: "Groups related content together in a section.", icon: `<svg width="24" height="24" viewBox="0 0 24 24"><line x1="2" y1="6" x2="22" y2="6" stroke="currentColor" stroke-width="2"/><line x1="2" y1="18" x2="22" y2="18" stroke="currentColor" stroke-width="2"/><text x="12" y="12" text-anchor="middle" font-size="8">SEC</text></svg>` },
  "article": { parentTag: "body", title: "Article", description: "Represents independent, self‑contained content (e.g., blog post).", icon: `<svg width="24" height="24" viewBox="0 0 24 24"><rect x="2" y="4" width="20" height="16" stroke="currentColor" stroke-width="2" fill="none"/><text x="12" y="18" text-anchor="middle" font-size="8">ART</text></svg>` },
  "aside":   { parentTag: "body", title: "Aside", description: "Contains content tangentially related to the main content (e.g., sidebar).", icon: `<svg width="24" height="24" viewBox="0 0 24 24"><rect x="16" y="2" width="6" height="20" stroke="currentColor" stroke-width="2" fill="none"/><text x="19" y="12" text-anchor="middle" font-size="6">ASD</text></svg>` },
  "footer":  { parentTag: "body", title: "Footer", description: "Represents footer content for its nearest sectioning content or the body.", icon: `<svg width="24" height="24" viewBox="0 0 24 24"><rect x="2" y="16" width="20" height="6" stroke="currentColor" stroke-width="2" fill="none"/><text x="12" y="20" text-anchor="middle" font-size="8">FTR</text></svg>` },
  "div":     { parentTag: "body", title: "Division", description: "A generic container for flow content.", icon: `<svg width="24" height="24" viewBox="0 0 24 24"><rect x="4" y="4" width="16" height="16" stroke="currentColor" stroke-width="2" fill="none"/><text x="12" y="18" text-anchor="middle" font-size="8">DIV</text></svg>` },
  "span":    { parentTag: "body", title: "Span", description: "A generic inline container for phrasing content.", icon: `<svg width="24" height="24" viewBox="0 0 24 24"><circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="2" fill="none"/><text x="12" y="16" text-anchor="middle" font-size="8">SPN</text></svg>` }
};

const textContentTags = {
  "h1":         { parentTag: "body", title: "Heading 1",   description: "Top‑level heading.", icon: `<svg width="24" height="24" viewBox="0 0 24 24"><text x="12" y="16" text-anchor="middle" font-size="14" fill="currentColor">H1</text></svg>` },
  "h2":         { parentTag: "body", title: "Heading 2",   description: "Second‑level heading.", icon: `<svg width="24" height="24" viewBox="0 0 24 24"><text x="12" y="16" text-anchor="middle" font-size="14" fill="currentColor">H2</text></svg>` },
  "h3":         { parentTag: "body", title: "Heading 3",   description: "Third‑level heading.", icon: `<svg width="24" height="24" viewBox="0 0 24 24"><text x="12" y="16" text-anchor="middle" font-size="14" fill="currentColor">H3</text></svg>` },
  "h4":         { parentTag: "body", title: "Heading 4",   description: "Fourth‑level heading.", icon: `<svg width="24" height="24" viewBox="0 0 24 24"><text x="12" y="16" text-anchor="middle" font-size="14" fill="currentColor">H4</text></svg>` },
  "h5":         { parentTag: "body", title: "Heading 5",   description: "Fifth‑level heading.", icon: `<svg width="24" height="24" viewBox="0 0 24 24"><text x="12" y="16" text-anchor="middle" font-size="14" fill="currentColor">H5</text></svg>` },
  "h6":         { parentTag: "body", title: "Heading 6",   description: "Sixth‑level heading.", icon: `<svg width="24" height="24" viewBox="0 0 24 24"><text x="12" y="16" text-anchor="middle" font-size="14" fill="currentColor">H6</text></svg>` },
  "p":          { parentTag: "body", title: "Paragraph",   description: "Defines a paragraph of text.", icon: `<svg width="24" height="24" viewBox="0 0 24 24"><path d="M4 8h16M4 12h16M4 16h16" stroke="currentColor" stroke-width="2"/></svg>` },
  "br":         { parentTag: "body", title: "Line Break",   description: "Inserts a line break.", icon: `<svg width="24" height="24" viewBox="0 0 24 24"><path d="M4 4v16h16" stroke="currentColor" stroke-width="2" fill="none"/></svg>` },
  "hr":         { parentTag: "body", title: "Horizontal Rule", description: "Inserts a thematic break (horizontal line).", icon: `<svg width="24" height="24" viewBox="0 0 24 24"><line x1="4" y1="12" x2="20" y2="12" stroke="currentColor" stroke-width="2"/></svg>` },
  "a":          { parentTag: "body", title: "Anchor",      description: "Defines a hyperlink.", icon: `<svg width="24" height="24" viewBox="0 0 24 24"><path d="M10 14l-4-4 4-4" stroke="currentColor" stroke-width="2" fill="none"/><path d="M14 10l4 4-4 4" stroke="currentColor" stroke-width="2" fill="none"/></svg>` },
  "strong":     { parentTag: "body", title: "Strong Importance", description: "Indicates strong importance (bold).", icon: `<svg width="24" height="24" viewBox="0 0 24 24"><text x="12" y="16" text-anchor="middle" font-size="14" font-weight="bold" fill="currentColor">B</text></svg>` },
  "em":         { parentTag: "body", title: "Emphasis",     description: "Indicates emphasized text (italic).", icon: `<svg width="24" height="24" viewBox="0 0 24 24"><text x="12" y="16" text-anchor="middle" font-size="14" font-style="italic" fill="currentColor">I</text></svg>` },
  "mark":       { parentTag: "body", title: "Highlight",    description: "Highlights text for reference.", icon: `<svg width="24" height="24" viewBox="0 0 24 24"><rect x="2" y="8" width="20" height="8" fill="currentColor"/><text x="12" y="16" text-anchor="middle" font-size="8" fill="#fff">M</text></svg>` },
  "small":      { parentTag: "body", title: "Small Text",   description: "Displays text in a smaller font.", icon: `<svg width="24" height="24" viewBox="0 0 24 24"><text x="12" y="16" text-anchor="middle" font-size="6" fill="currentColor">a</text></svg>` },
  "blockquote": { parentTag: "body", title: "Block Quote", description: "Specifies a section quoted from another source.", icon: `<svg width="24" height="24" viewBox="0 0 24 24"><text x="4" y="16" font-size="24" fill="currentColor">“</text></svg>` },
  "code":       { parentTag: "body", title: "Code",        description: "Displays a piece of computer code.", icon: `<svg width="24" height="24" viewBox="0 0 24 24"><text x="12" y="16" text-anchor="middle" font-size="14" fill="currentColor">{}</text></svg>` },
  "pre":        { parentTag: "body", title: "Preformatted Text", description: "Displays preformatted text, preserving whitespace.", icon: `<svg width="24" height="24" viewBox="0 0 24 24"><rect x="2" y="4" width="20" height="16" stroke="currentColor" stroke-width="2" fill="none"/><text x="12" y="14" text-anchor="middle" font-size="8" fill="currentColor">pre</text></svg>` }
};

const listTags = {
  "ul": { parentTag: "body", title: "Unordered List", description: "Defines a list of items in no particular order.", icon: `<svg width="24" height="24" viewBox="0 0 24 24"><circle cx="6" cy="8" r="2" fill="currentColor"/><circle cx="6" cy="16" r="2" fill="currentColor"/><line x1="10" y1="8" x2="20" y2="8" stroke="currentColor" stroke-width="2"/><line x1="10" y1="16" x2="20" y2="16" stroke="currentColor" stroke-width="2"/></svg>` },
  "ol": { parentTag: "body", title: "Ordered List", description: "Defines a list of items in a specific order.", icon: `<svg width="24" height="24" viewBox="0 0 24 24"><text x="4" y="9" font-size="8" fill="currentColor">1.</text><text x="4" y="17" font-size="8" fill="currentColor">2.</text><line x1="10" y1="8" x2="20" y2="8" stroke="currentColor" stroke-width="2"/><line x1="10" y1="16" x2="20" y2="16" stroke="currentColor" stroke-width="2"/></svg>` },
  "li": { parentTag: ["ul","ol"], title: "List Item", description: "Defines an item within a list.", icon: `<svg width="24" height="24" viewBox="0 0 24 24"><circle cx="6" cy="12" r="2" fill="currentColor"/><text x="12" y="16" text-anchor="middle" font-size="8" fill="currentColor">LI</text></svg>` },
  "dl": { parentTag: "body", title: "Description List", description: "Defines a list of terms and their descriptions.", icon: `<svg width="24" height="24" viewBox="0 0 24 24"><text x="4" y="9" font-size="8">Term</text><text x="4" y="17" font-size="8">Desc</text></svg>` },
  "dt": { parentTag: "dl", title: "Description Term", description: "Defines a term in a description list.", icon: `<svg width="24" height="24" viewBox="0 0 24 24"><text x="12" y="16" text-anchor="middle" font-size="10">DT</text></svg>` },
  "dd": { parentTag: "dl", title: "Description Definition", description: "Defines the description of a term in a description list.", icon: `<svg width="24" height="24" viewBox="0 0 24 24"><text x="12" y="16" text-anchor="middle" font-size="10">DD</text></svg>` }
};

const mediaTags = {
  "img":       { parentTag: "body", title: "Image", description: "Embeds an image.", icon: `<svg width="24" height="24" viewBox="0 0 24 24"><rect x="2" y="2" width="20" height="20" stroke="currentColor" stroke-width="2" fill="none"/><circle cx="8" cy="8" r="2" fill="currentColor"/><path d="M2 20l8-8 4 4 8-8v12H2z" stroke="currentColor" stroke-width="2" fill="none"/></svg>` },
  "figure":    { parentTag: "body", title: "Figure", description: "Represents self‑contained content like images with captions.", icon: `<svg width="24" height="24" viewBox="0 0 24 24"><rect x="2" y="2" width="20" height="20" stroke="currentColor" stroke-width="2" fill="none"/><text x="12" y="18" text-anchor="middle" font-size="8">FIG</text></svg>` },
  "figcaption":{ parentTag: "figure", title:"Figure Caption", description:"Provides a caption for a figure element.", icon:`<svg width="24" height="24" viewBox="0 0 24 24"><text x="12" y="16" text-anchor="middle" font-size="8">CAP</text></svg>`},
  "audio":     { parentTag: "body", title: "Audio", description: "Embeds audio content.", icon: `<svg width="24" height="24" viewBox="0 0 24 24"><path d="M4 9v6h4l6 4V5L8 9H4z" fill="currentColor"/></svg>` },
  "video":     { parentTag: "body", title: "Video", description: "Embeds video content.", icon: `<svg width="24" height="24" viewBox="0 0 24 24"><rect x="2" y="2" width="20" height="20" stroke="currentColor" stroke-width="2" fill="none"/><path d="M10 8l6 4-6 4V8z" fill="currentColor"/></svg>` },
  "source":    { parentTag: ["audio","video"], title: "Media Source", description: "Specifies multiple media resources for audio or video.", icon: `<svg width="24" height="24" viewBox="0 0 24 24"><circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="2" fill="none"/><text x="12" y="16" text-anchor="middle" font-size="8">SRC</text></svg>` },
  "track":     { parentTag:"video", title:"Text Track", description:"Defines text tracks for video (e.g., subtitles).", icon:`<svg width="24" height="24" viewBox="0 0 24 24"><text x="12" y="16" text-anchor="middle" font-size="8">TRK</text></svg>`},
  "canvas":    { parentTag:"body", title:"Canvas", description:"Provides a drawing area for graphics via JavaScript.", icon:`<svg width="24" height="24" viewBox="0 0 24 24"><rect x="2" y="2" width="20" height="20" fill="none" stroke="currentColor" stroke-width="2"/><path d="M6 18l4-8 4 8 4-4" stroke="currentColor" stroke-width="2" fill="none"/></svg>`},
  "svg":       { parentTag:"body", title:"SVG", description:"Embeds scalable vector graphics.", icon:`<svg width="24" height="24" viewBox="0 0 24 24"><circle cx="12" cy="12" r="10" fill="none" stroke="currentColor" stroke-width="2"/><text x="12" y="16" text-anchor="middle" font-size="8">SVG</text></svg>`}
};


// 6. Table Tags
const tableTags = {
  "table":    { parentTag: "body",  title: "Table",             description: "Defines a table.", icon: `<svg width="24" height="24" viewBox="0 0 24 24"><rect x="2" y="2" width="20" height="20" stroke="currentColor" stroke-width="2" fill="none"/><line x1="2" y1="8" x2="22" y2="8" stroke="currentColor" stroke-width="2"/><line x1="2" y1="16" x2="22" y2="16" stroke="currentColor" stroke-width="2"/></svg>` },
  "caption":  { parentTag: "table", title: "Table Caption",    description: "Provides a title or explanation for the table.",  icon: `<svg width="24" height="24" viewBox="0 0 24 24"><text x="12" y="16" text-anchor="middle" font-size="6">CAPTION</text></svg>` },
  "thead":    { parentTag: "table", title: "Table Head",      description: "Groups header content in a table.",  icon: `<svg width="24" height="24" viewBox="0 0 24 24"><line x1="2" y1="8" x2="22" y2="8" stroke="currentColor" stroke-width="2"/><text x="12" y="16" text-anchor="middle" font-size="8">THEAD</text></svg>` },
  "tbody":    { parentTag: "table", title: "Table Body",      description: "Groups the main body content in a table.", icon: `<svg width="24" height="24" viewBox="0 0 24 24"><line x1="2" y1="12" x2="22" y2="12" stroke="currentColor" stroke-width="2"/><text x="12" y="18" text-anchor="middle" font-size="8">TBODY</text></svg>` },
  "tfoot":    { parentTag: "table", title: "Table Footer",    description: "Groups footer content in a table.",  icon: `<svg width="24" height="24" viewBox="0 0 24 24"><line x1="2" y1="16" x2="22" y2="16" stroke="currentColor" stroke-width="2"/><text x="12" y="20" text-anchor="middle" font-size="8">TFOOT</text></svg>` },
  "tr":       { parentTag: ["thead","tbody","tfoot"], title: "Table Row", description: "Defines a row in a table.",  icon: `<svg width="24" height="24" viewBox="0 0 24 24"><line x1="2" y1="12" x2="22" y2="12" stroke="currentColor" stroke-width="2"/><text x="12" y="16" text-anchor="middle" font-size="8">TR</text></svg>` },
  "th":       { parentTag: "tr",        title: "Table Header Cell", description: "Defines a header cell in a table.",  icon: `<svg width="24" height="24" viewBox="0 0 24 24"><rect x="2" y="6" width="20" height="4" fill="currentColor"/><text x="12" y="16" text-anchor="middle" font-size="8" fill="#fff">TH</text></svg>` },
  "td":       { parentTag: "tr",        title: "Table Data Cell",   description: "Defines a standard data cell in a table.",  icon: `<svg width="24" height="24" viewBox="0 0 24 24"><rect x="2" y="6" width="20" height="4" stroke="currentColor" stroke-width="2" fill="none"/><text x="12" y="16" text-anchor="middle" font-size="8">TD</text></svg>` },
  "colgroup": { parentTag: "table",     title: "Column Group",     description: "Groups columns in a table for formatting.",icon: `<svg width="24" height="24" viewBox="0 0 24 24"><rect x="4" y="2" width="4" height="20" stroke="currentColor" stroke-width="2" fill="none"/><rect x="10" y="2" width="4" height="20" stroke="currentColor" stroke-width="2" fill="none"/><rect x="16" y="2" width="4" height="20" stroke="currentColor" stroke-width="2" fill="none"/></svg>` },
  "col":      { parentTag: "colgroup",  title: "Column",         description: "Specifies column properties for formatting.",  icon: `<svg width="24" height="24" viewBox="0 0 24 24"><rect x="10" y="2" width="4" height="20" stroke="currentColor" stroke-width="2" fill="none"/></svg>` }
};

// 7. Form Tags
const formTags = {
  "form":     { parentTag: "body",  title: "Form",     description: "Defines a form for user input.", icon: `<svg width="24" height="24" viewBox="0 0 24 24"><rect x="3" y="3" width="18" height="18" stroke="currentColor" stroke-width="2" fill="none"/><text x="12" y="15" text-anchor="middle" font-size="6">FORM</text></svg>` },
  "input":    { parentTag: "form",  title: "Input",    description: "Defines an input field.", icon: `<svg width="24" height="24" viewBox="0 0 24 24"><rect x="4" y="8" width="16" height="8" stroke="currentColor" stroke-width="2" fill="none"/><text x="12" y="14" text-anchor="middle" font-size="6">IN</text></svg>` },
  "textarea": { parentTag: "form",  title: "Textarea", description: "Defines a multiline text input field.", icon: `<svg width="24" height="24" viewBox="0 0 24 24"><rect x="3" y="5" width="18" height="14" stroke="currentColor" stroke-width="2" fill="none"/><text x="12" y="17" text-anchor="middle" font-size="6">TXT</text></svg>` },
  "button":   { parentTag: "form",  title: "Button",   description: "Defines a clickable button.", icon: `<svg width="24" height="24" viewBox="0 0 24 24"><rect x="6" y="8" width="12" height="8" rx="2" stroke="currentColor" stroke-width="2" fill="none"/><text x="12" y="14" text-anchor="middle" font-size="6">BTN</text></svg>` },
  "label":    { parentTag: "form",  title: "Label",    description: "Defines a label for an input element.", icon: `<svg width="24" height="24" viewBox="0 0 24 24"><text x="12" y="16" text-anchor="middle" font-size="6">LBL</text></svg>` },
  "select":   { parentTag: "form",  title: "Select",   description: "Defines a dropdown list.", icon: `<svg width="24" height="24" viewBox="0 0 24 24"><rect x="4" y="8" width="16" height="8" stroke="currentColor" stroke-width="2" fill="none"/><path d="M8 12l4 4 4-4" stroke="currentColor" stroke-width="2" fill="none"/></svg>` },
  "option":   { parentTag: "select", title: "Option",   description: "Defines an option in a dropdown list.", icon: `<svg width="24" height="24" viewBox="0 0 24 24"><circle cx="6" cy="12" r="2" fill="currentColor"/><text x="12" y="16" text-anchor="middle" font-size="6">OPT</text></svg>` },
  "fieldset": { parentTag: "form",  title: "Fieldset", description: "Groups related elements in a form.", icon: `<svg width="24" height="24" viewBox="0 0 24 24"><rect x="3" y="6" width="18" height="12" stroke="currentColor" stroke-width="2" fill="none"/><text x="12" y="14" text-anchor="middle" font-size="6">FS</text></svg>` },
  "legend":   { parentTag: "fieldset", title: "Legend",    description: "Defines a caption for a fieldset.", icon: `<svg width="24" height="24" viewBox="0 0 24 24"><text x="12" y="16" text-anchor="middle" font-size="6">LEG</text></svg>` },
  "datalist": { parentTag: "form",  title: "Datalist", description: "Provides an autocomplete list for an input element.", icon: `<svg width="24" height="24" viewBox="0 0 24 24"><rect x="4" y="8" width="16" height="8" stroke="currentColor" stroke-width="2" fill="none"/><text x="12" y="14" text-anchor="middle" font-size="6">DL</text></svg>` },
  "output":   { parentTag: "form",  title: "Output",    description: "Represents the result of a calculation.", icon: `<svg width="24" height="24" viewBox="0 0 24 24"><text x="12" y="16" text-anchor="middle" font-size="6">OUT</text></svg>` }
};

const otherTags = {
  "details":  { parentTag: "body",  title: "Details",  description: "Creates a disclosure widget that can hide/show content.", icon: `<svg width="24" height="24" viewBox="0 0 24 24"><path d="M4 6h16v4H4z" stroke="currentColor" stroke-width="2" fill="none"/><path d="M4 14h16v4H4z" stroke="currentColor" stroke-width="2" fill="none"/></svg>` },
  "summary":  { parentTag: "details", title: "Summary",  description: "Defines a summary or label for the details element.", icon: `<svg width="24" height="24" viewBox="0 0 24 24"><text x="12" y="16" text-anchor="middle" font-size="6">SUM</text></svg>` },
  "template": { parentTag: "body",  title: "Template", description: "Holds client‑side content that is not rendered when the page loads.", icon: `<svg width="24" height="24" viewBox="0 0 24 24"><rect x="4" y="4" width="16" height="16" fill="none" stroke="currentColor" stroke-width="2"/><text x="12" y="14" text-anchor="middle" font-size="6">TPL</text></svg>` },
  "slot":     { parentTag: "body",  title: "Slot",     description: "Defines a placeholder inside a web component.", icon: `<svg width="24" height="24" viewBox="0 0 24 24"><circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="2" fill="none"/><text x="12" y="16" text-anchor="middle" font-size="6">SLT</text></svg>` },
  "noscript": { parentTag: "body",  title: "No Script", description: "Defines content for browsers that do not support JavaScript.", icon: `<svg width="24" height="24" viewBox="0 0 24 24"><text x="12" y="16" text-anchor="middle" font-size="6">NS</text></svg>` },
  "embed":    { parentTag: "body",  title: "Embed",    description: "Embeds external content like PDFs or media.", icon: `<svg width="24" height="24" viewBox="0 0 24 24"><rect x="4" y="4" width="16" height="16" fill="none" stroke="currentColor" stroke-width="2"/><text x="12" y="14" text-anchor="middle" font-size="6">EMB</text></svg>` },
  "object":   { parentTag: "body",  title: "Object",   description: "Embeds multimedia or interactive content.", icon: `<svg width="24" height="24" viewBox="0 0 24 24"><path d="M4 4h16v16H4z" fill="none" stroke="currentColor" stroke-width="2"/><text x="12" y="16" text-anchor="middle" font-size="6">OBJ</text></svg>` },
  "param":    { parentTag: "object",title: "Parameter",description: "Defines parameters for the object element.", icon: `<svg width="24" height="24" viewBox="0 0 24 24"><text x="12" y="16" text-anchor="middle" font-size="6">PRM</text></svg>` }
};

// -----------------------------------------------------------------------------
// Icon Factory – returns an SVG string representing the tag. For tags that don’t
// have a custom icon, it falls back to a rounded rectangle with the tag name.
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
// Combine groups into a single object and enrich each tag with its icon.
// -----------------------------------------------------------------------------
const htmlTags = {
  metadata: metadataTags,
  layout: layoutTags,
  textContent: textContentTags,
  list: listTags,
  media: mediaTags,
  table: tableTags,
  form: formTags,
  others: otherTags
};


// 1) İçerik Modelleri (HTML5)
const contentModels = {
  metadata: ["!doctype","html","head","meta","title","base","link","style","script","noscript"],
  flow: [
    "div","section","article","aside","header","footer","main","nav","p",
    "ul","ol","li","dl","dt","dd","figure","figcaption","table","form",
    "blockquote","details","summary","template","slot","noscript","embed",
    "object","span"
  ],
  phrasing: [
    "span","a","em","strong","small","mark","code","br","img","video","audio",
    "canvas","svg","source","track","input","button","label","select","textarea"
  ],
  embedded: ["img","video","audio","canvas","svg","iframe","embed","object","picture"],
  interactive: ["a","button","input","textarea","select","summary","label"]
};

// 2) Tüm etiket tanımlarınızı birleştirin (metadataTags, layoutTags, … diğer objeler)
const allTags = {
  ...metadataTags,
  ...layoutTags,
  ...textContentTags,
  ...listTags,
  ...mediaTags,
  ...tableTags,
  ...formTags,
  ...otherTags
};

// 3) Her tag'ın hangi kategori(ler)e ait olduğunu bulun
const tagToCategories = Object.entries(contentModels)
  .flatMap(([cat, tags]) => tags.map(tag => [tag.toLowerCase(), cat]))
  .reduce((acc, [tag, cat]) => {
    (acc[tag] ||= []).push(cat);
    return acc;
  }, {});

// 4) Orijinal tanımlarda parentTag yerine parentCategories atayın
Object.entries(allTags).forEach(([tag, def]) => {
  def.parentCategories = tagToCategories[tag] || [];
  delete def.parentTag;
});

// 5) Void element listesi (hiç child kabul etmez)
const voidElements = [
  "area","base","br","col","embed","hr","img",
  "input","link","meta","param","source","track","wbr"
];

// 6) Kategori tabanlı default dockable map üretimi
function buildDefaultChildrenMap(allTags, tagToCategories) {
  return Object.fromEntries(
    Object.entries(allTags).map(([parent, def]) => {
      if (voidElements.includes(parent)) {
        return [parent, []];
      }
      const cats = def.parentCategories;
      const children = Object.entries(allTags)
        .filter(([child, cd]) =>
          cd.parentCategories.some(c => cats.includes(c))
        )
        .map(([child]) => child);
      return [parent, children];
    })
  );
}

const defaultChildrenMap = buildDefaultChildrenMap(allTags, tagToCategories);

// 2) Varsayılan ebeveyn listelerini tersine çevirelim
function invertMap(map) {
  const inv = {};
  Object.entries(map).forEach(([parent, children]) => {
    children.forEach(child => {
      (inv[child] ||= []).push(parent);
    });
  });
  return inv;
}

const defaultParentsMap = invertMap(defaultChildrenMap);

// 3) Parent→Child override: sadece bu parent’ın içine şunlar drop edilebilir
const childrenOverride = {
  table:   ["caption","colgroup","thead","tbody","tfoot","tr"],
  tr:      ["th","td"],
  ul:      ["li"],
  ol:      ["li"],
  dl:      ["dt","dd"],
  select:  ["optgroup","option"],
  optgroup:["option"],
  object:  ["param"],
  audio:   ["source","track"],
  video:   ["source","track"],
  fieldset:["legend","input","label","button","select","textarea"]
  // … istersen eklemeye devam et …
};

// 4) Child→Parent override: sadece bu child, bu ebeveynlerin içine drop edilebilir
const parentsOverride = {
  caption:  ["table"],
  colgroup: ["table"],
  col:      ["colgroup"],
  thead:    ["table"],
  tbody:    ["table"],
  tfoot:    ["table"],
  tr:       ["table","thead","tbody","tfoot"],
  th:       ["tr"],
  td:       ["tr"],
  li:       ["ul","ol"],
  dt:       ["dl"],
  dd:       ["dl"],
  optgroup: ["select"],
  option:   ["select","datalist"],
  param:    ["object"],
  track:    ["audio","video"],
  legend:   ["fieldset"],
  label:    ["form","fieldset"],
  // … başka child override’ları ekleyebilirsin …
};

// 5) Bir drop’un geçerli olup olmadığını kontrol eden fonksiyon:
canDrop=function (parentTag, childTag) {
  // 5a) Önce çocuk listesine bakalım
  const allowedChildren = childrenOverride[parentTag] 
    ?? defaultChildrenMap[parentTag] 
    ?? [];
  if (!allowedChildren.includes(childTag)) return false;

  // 5b) Sonra ebeveyn listesine bakalım
  const allowedParents = parentsOverride[childTag]
    ?? defaultParentsMap[childTag]
    ?? [];
  if (!allowedParents.includes(parentTag)) return false;

  return true;
}


  // HTML element tree data

  const htmlTree = [
    {
      tag: 'html',
      children: [
        {
          tag: 'head',
          children: [
            { tag: 'title', children: [] },
            { tag: 'meta', children: [] },
            { tag: 'link', children: [] },
            { tag: 'script', children: [] }
          ]
        },
        {
          tag: 'body',
          children: [
            { tag: 'header', children: [] },
            {
              tag: 'nav',
              children: [
                {
                  tag: 'ul',
                  children: [
                    {
                      tag: 'li',
                      children: [
                        { tag: 'a', children: [] }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              tag: 'main',
              children: [
                {
                  tag: 'section',
                  children: [
                    { tag: 'article', children: [] },
                    { tag: 'aside', children: [] }
                  ]
                }
              ]
            },
            { tag: 'article', children: [] },
            { tag: 'section', children: [] },
            { tag: 'aside', children: [] },
            { tag: 'footer', children: [] },
            { tag: 'div', children: [] },
            { tag: 'span', children: [] },
            { tag: 'p', children: [] },
            { tag: 'a', children: [] },
            {
              tag: 'ul',
              children: [
                { tag: 'li', children: [ { tag: 'a', children: [] } ] }
              ]
            },
            {
              tag: 'ol',
              children: [
                { tag: 'li', children: [] }
              ]
            },
            {
              tag: 'table',
              children: [
                {
                  tag: 'thead',
                  children: [
                    { tag: 'tr', children: [ { tag: 'th', children: [] } ] }
                  ]
                },
                {
                  tag: 'tbody',
                  children: [
                    { tag: 'tr', children: [ { tag: 'td', children: [] } ] }
                  ]
                }
              ]
            },
            { tag: 'img', children: [] },
            { tag: 'button', children: [] },
            {
              tag: 'form',
              children: [
                { tag: 'label', children: [] },
                { tag: 'input', children: [] },
                { tag: 'select', children: [ { tag: 'option', children: [] } ] },
                { tag: 'textarea', children: [] },
                { tag: 'button', children: [] }
              ]
            },
          ]
        }
      ]
    }
  ];

 
  global.defaultIcons = defaultIcons;
  global.elementIcons = elementIcons;
 
})(window);

TDragDropManager=class DragDropManager {
  constructor(container, opts = {}) {
    this.container = container;
    this.opts = Object.assign({
      draggableSelector: '[data-draggable]',
      moveableSelector:  '[data-moveable]',
      sizeableSelector:  '[data-sizeable]',
      dropZoneSelector:  '[data-dockable]',
      lockableSelector:  '[data-lockable]',
      unselectableSelector: '[data-unselectable]',
    }, opts);

    // Unselectable’ları disable et
    container.querySelectorAll(this.opts.unselectableSelector)
      .forEach(el=>Object.assign(el.style,{
        userSelect:'none',pointerEvents:'none',cursor:'not-allowed'
      }));

    // Lock ikonu
    this._lockIcon = document.createElement('div');
    this._lockIcon.className='ddm-lock-icon';
    Object.assign(this._lockIcon.style,{
      position:'absolute',display:'none',pointerEvents:'none',zIndex:9999
    });
    document.body.appendChild(this._lockIcon);

    // Event bind
    this._showLock = this._showLock.bind(this);
    this._hideLock = this._hideLock.bind(this);
    this._down     = this._down.bind(this);
    this._move     = this._move.bind(this);
    this._up       = this._up.bind(this);

    container.addEventListener('pointerover', this._showLock, true);
    container.addEventListener('pointerout',  this._hideLock, true);
    container.addEventListener('pointerdown', this._down);
    document.addEventListener('pointermove', this._move);
    document.addEventListener('pointerup',   this._up);
  }

  _showLock(e) {
    const el = e.target.closest(this.opts.lockableSelector);
    if (!el) return;
    const r = el.getBoundingClientRect();
    this._lockIcon.innerText = el.hasAttribute('data-lockable')?'🔒':'🔓';
    Object.assign(this._lockIcon.style,{
      display:'block',
      top:`${r.top+window.scrollY+2}px`,
      left:`${r.left+window.scrollX+2}px`
    });
  }
  _hideLock(e) {
    if (!e.relatedTarget||!e.relatedTarget.closest(this.opts.lockableSelector))
      this._lockIcon.style.display='none';
  }

  _down(e) {
    const el = e.target.closest("[data-status]");
    if (!el) return;
    const status = el.getAttribute('data-status');
    if (Tenum.inEnum(status, EelementStatus.lockable)) { e.preventDefault(); return; }
    if (Tenum.inEnum(status, EelementStatus.draggable)) return this._startDrag(e,el);
    if (Tenum.inEnum(status, EelementStatus.moveable )) return this._startMove(e,el);
    if (Tenum.inEnum(status, EelementStatus.sizeable )) return this._startResize(e,el);
  }

  _startDrag(e, el) {
    const rect = el.getBoundingClientRect();
    const pageLeft = rect.left + window.scrollX;
    const pageTop  = rect.top  + window.scrollY;
  
    this._state = {
      mode:    'drag',
      target:  el,
      ptrId:   e.pointerId,
      // artık pageX/Y bazlı:
      startX:  e.pageX,
      startY:  e.pageY,
      // offset: fare pozisyonu - element pozisyonu (sayfa koordinatında)
      offsetX: e.pageX - pageLeft,
      offsetY: e.pageY - pageTop,
      origOp:  el.style.opacity || ''
    };
    this._state.ghost = this._createGhost(el);
    el.setPointerCapture(e.pointerId);
    el.style.opacity = '0.3';
  }
  _startMove(e, el) {
    const r = el.getBoundingClientRect();
    this._state = {
      mode:'move', target:el, ptrId:e.pointerId,
      startX:e.clientX, startY:e.clientY,
      offsetX:e.clientX - r.left, offsetY:e.clientY - r.top
    };
    el.setPointerCapture(e.pointerId);
  }

  _startResize(e, el) {
    this._ensureHandles(el);
    const h = e.target.closest('.resize-handle');
    if (!h) return;
    this._state = {
      mode:'size', target:el, ptrId:e.pointerId,
      dir:h.dataset.direction,
      startX:e.clientX, startY:e.clientY,
      startRect: el.getBoundingClientRect()
    };
    h.setPointerCapture(e.pointerId);
  }

  _move(e) {
    const s = this._state;
    if (!s || e.pointerId !== s.ptrId) return;
    e.preventDefault();
  
    if (s.mode === 'drag') {
      const g = s.ghost;
      // ghost’u da pageX/Y kullanarak konumlandır
      g.style.left = `${e.pageX - s.offsetX}px`;
      g.style.top  = `${e.pageY - s.offsetY}px`;
  
    } else if (s.mode === 'move') {
      const t = s.target;
      t.style.position = 'absolute';
      t.style.left = `${e.pageX - s.offsetX}px`;
      t.style.top  = `${e.pageY - s.offsetY}px`;
  
    } else if (s.mode === 'size') {
      const t = s.target;
      const r = s.startRect;
      const dx = e.pageX - s.startX;
      const dy = e.pageY - s.startY;
      if (s.dir.includes('e')) t.style.width  = `${r.width  + dx}px`;
      if (s.dir.includes('s')) t.style.height = `${r.height + dy}px`;
      if (s.dir.includes('w')) {
        t.style.width = `${r.width - dx}px`;
        t.style.left  = `${r.left + dx + window.scrollX}px`;
      }
      if (s.dir.includes('n')) {
        t.style.height = `${r.height - dy}px`;
        t.style.top    = `${r.top  + dy + window.scrollY}px`;
      }
    }
  }
  
  // 3) Ghost oluştururken de page scroll’ü ekle:
  _createGhost(el) {
    const r = el.getBoundingClientRect();
    const g = el.cloneNode(true);
    Object.assign(g.style, {
      position:      'absolute',
      left:          `${r.left + window.scrollX}px`,
      top:           `${r.top  + window.scrollY}px`,
      width:         `${r.width}px`,
      height:        `${r.height}px`,
      opacity:       '0.5',
      pointerEvents: 'none',
      zIndex:        '9999'
    });
    document.body.appendChild(g);
    return g;
  }
  
  // 4) Drop logic’unda da pageX/Y kullanıyoruz:
  _up(e) {
    const s = this._state;
    if (!s || e.pointerId !== s.ptrId) return;
    const t = s.target;
    t.releasePointerCapture(e.pointerId);
  
    if (s.mode === 'drag') {
      s.ghost.remove();
      t.style.opacity = s.origOp;
      if (this.opts.dropZoneSelector) {
        // viewport’da e.clientX/Y, scroll etkisini zaten kapsıyor
        const over = document.elementFromPoint(e.clientX, e.clientY)
                       ?.closest(this.opts.dropZoneSelector);
        if (over) {
          const parentTag = over.tagName.toLowerCase();
          const childTag  = t.tagName.toLowerCase();
          if (canDrop(parentTag, childTag)) {
            over.appendChild(t);
          }
        }
      }
    }
  
    this._state = null;
  }
  _ensureHandles(el) {
    if (el._hasHandles) return;
    ['n','ne','e','se','s','sw','w','nw'].forEach(dir=>{
      const h = document.createElement('div');
      h.className = `resize-handle resize-handle-${dir}`;
      h.dataset.direction = dir;
      Object.assign(h.style,{
        position:'absolute',width:'8px',height:'8px',
        backgroundColor:'#55ff55',border:'1px solid black',
        cursor:`${dir}-resize`
      });
      const posMap = {
        n:{top:'-4px',left:'50%',transform:'translateX(-50%)'},
        s:{bottom:'-4px',left:'50%',transform:'translateX(-50%)'},
        e:{right:'-4px',top:'50%',transform:'translateY(-50%)'},
        w:{left:'-4px',top:'50%',transform:'translateY(-50%)'},
        ne:{top:'-4px',right:'-4px'},
        se:{bottom:'-4px',right:'-4px'},
        sw:{bottom:'-4px',left:'-4px'},
        nw:{top:'-4px',left:'-4px'}
      };
      Object.assign(h.style, posMap[dir]||{});
      el.appendChild(h);
    });
    el._hasHandles = true;
  }

  dispose() {
    this.container.removeEventListener('pointerdown', this._down);
    this.container.removeEventListener('pointerover', this._showLock, true);
    this.container.removeEventListener('pointerout',  this._hideLock, true);
    document.removeEventListener('pointermove', this._move);
    document.removeEventListener('pointerup',   this._up);
    this._lockIcon.remove();
  }
}

// ———————————————
// 1) Path ↔ Z-Index Encode/Decode
// ———————————————

/**
 * [i0, i1, …] path’ini tekil, monotonik artan bir z-index’e çevirir.
 * segmentSize her seviyenin kaç basamaklı olacağını belirler.
 */
function encodePathToZIndex(path, segmentSize = 2) {
  const base = 10 ** segmentSize;
  // +1 koymamıza gerek yok, path=[0] zaten 0*base+0 = 0; path=[1] → 1; path=[2]→2
  return path.reduce((z, idx) => z * base + idx, 0);
}

/**
 * Z-index’ten, segmentSize’ya göre orijinal [i0, i1, …] path’ini çıkarır.
 */
function decodeZIndexToPath(raw, segmentSize = 2) {
  let z = typeof raw === 'string' ? parseInt(raw, 10) : raw;
  const path = [];
  const base = 10 ** segmentSize;
  while (z > 0) {
    path.unshift(z % base);
    z = Math.floor(z / base);
  }
  return path;
}


// ———————————————
// 2) TlayerNode
// ———————————————



// 3) Tek seferde hepsini defineLayer ile oluştur
/*layerNames.forEach(name => layerEngine.createLayer(name));

// 4) Z-index’leri hemen hesapla (opsiyonel; defineLayer zaten çağırıyor)
layerEngine.updateZIndices();*/
document.addEventListener('DOMContentLoaded', () => {


})
// Temel ToolWindow Sınıfı
class TToolWindow extends Telement {
    constructor(options = {}) {
        const {
            title = 'Tool Window',
            dockable = true,
            floatable = true,
            resizable = true,
            initialDockState = 'docked',
            container = null,
            width = 300,
            height = 400,
            ...otherOptions
        } = options;

        super('div', {
            className: 'tool-window',
            style: {
                display: 'flex',
                flexDirection: 'column',
                backgroundColor: '#f5f5f5',
                border: '1px solid #ddd',
                borderRadius: '4px',
                boxShadow: '0 2px 10px rgba(0,0,0,0.1)',
                overflow: 'hidden',
                width: width + 'px',
                height: height + 'px',
                position: 'absolute'
            },
            ...otherOptions
        });

        this.title = title;
        this.dockable = dockable;
        this.floatable = floatable;
        this.resizable = resizable;
        this.dockState = initialDockState; // 'docked', 'floating', 'hidden'
        this.container = container;
        this.dragOffset = { x: 0, y: 0 };
        this.resizeStart = { width: 0, height: 0 };
        this.minSize = { width: 150, height: 100 };

        // Bileşenleri oluştur
        this.header = this.#createHeader();
        this.content = new Telement('div', {
            className: 'tool-window-content',
            style: {
                flex: '1',
                overflow: 'auto',
                padding: '8px'
            }
        });

        this.appendChild(this.header);
        this.appendChild(this.content);

        // Durum ayarla
        this.#setInitialState();
        this.#setupEvents();
    }

    #createHeader() {
        const header = new Telement('div', {
            className: 'tool-window-header',
            style: {
                display: 'flex',
                justifyContent: 'space-between',
                alignItems: 'center',
                padding: '6px 10px',
                backgroundColor: '#e0e0e0',
                borderBottom: '1px solid #ddd',
                cursor: 'move',
                userSelect: 'none'
            }
        });
        
        this.titleElement = new Telement('span', {
            text: this.title,
            style: {
                fontWeight: 'bold'
            }
        });

        this.controls = new Telement('div', {
            className: 'tool-window-controls',
            style: {
                display: 'flex',
                gap: '6px'
            }
        });

        if (this.dockable) {
            this.dockButton = new Telement('button', {
                className: 'tool-window-dock-btn',
                html: '📌',
                attrs: { title: 'Dock/Undock' },
                style: {
                    background: 'none',
                    border: 'none',
                    cursor: 'pointer',
                    fontSize: '14px'
                }
            });
            this.controls.appendChild(this.dockButton);
        }

        this.closeButton = new Telement('button', {
            className: 'tool-window-close-btn',
            html: '✕',
            attrs: { title: 'Close' },
            style: {
                background: 'none',
                border: 'none',
                cursor: 'pointer',
                fontSize: '14px'
            }
        });
        this.controls.appendChild(this.closeButton);

        header.appendChild(this.titleElement);
        header.appendChild(this.controls);

        return header;
    }

    #setInitialState() {
        if (this.dockState === 'docked' && this.container) {
            this.#dockToContainer();
        } else if (this.dockState === 'floating') {
            this.#floatWindow();
        } else {
            this.hide();
        }
    }

    #setupEvents() {
        // Başlık çubuğundan sürükleme
        this.header.htmlObject.addEventListener('mousedown', (e) => {
            if (e.button !== 0) return;
            
            const rect = this.htmlObject.getBoundingClientRect();
            this.dragOffset = {
                x: e.clientX - rect.left,
                y: e.clientY - rect.top
            };

            const onMouseMove = (moveEvent) => {
                if (this.dockState === 'floating') {
                    this.css({
                        left: (moveEvent.clientX - this.dragOffset.x) + 'px',
                        top: (moveEvent.clientY - this.dragOffset.y) + 'px'
                    });
                }
            };

            const onMouseUp = () => {
                document.removeEventListener('mousemove', onMouseMove);
                document.removeEventListener('mouseup', onMouseUp);
                
                // Eğer bir dock alanına yakınsa, dock et
                if (this.dockable) {
                    this.#checkDockProximity();
                }
            };

            document.addEventListener('mousemove', onMouseMove);
            document.addEventListener('mouseup', onMouseUp);
        });

        // Dock/Undock butonu
        if (this.dockButton) {
            this.dockButton.htmlObject.addEventListener('click', () => this.toggleDock());
        }

        // Kapat butonu
        this.closeButton.htmlObject.addEventListener('click', () => this.hide());

        // Boyutlandırma
        if (this.resizable) {
            this.#setupResizing();
        }
    }

    #setupResizing() {
        const resizeHandle = new Telement('div', {
            className: 'tool-window-resize-handle',
            style: {
                position: 'absolute',
                right: '0',
                bottom: '0',
                width: '12px',
                height: '12px',
                cursor: 'nwse-resize',
                backgroundColor: '#ccc'
            }
        });
        this.appendChild(resizeHandle);

        resizeHandle.htmlObject.addEventListener('mousedown', (e) => {
            e.stopPropagation();
            if (e.button !== 0) return;

            const rect = this.htmlObject.getBoundingClientRect();
            this.resizeStart = {
                width: rect.width,
                height: rect.height,
                x: e.clientX,
                y: e.clientY
            };

            const onMouseMove = (moveEvent) => {
                const newWidth = this.resizeStart.width + (moveEvent.clientX - this.resizeStart.x);
                const newHeight = this.resizeStart.height + (moveEvent.clientY - this.resizeStart.y);
                
                this.css({
                    width: Math.max(this.minSize.width, newWidth) + 'px',
                    height: Math.max(this.minSize.height, newHeight) + 'px'
                });
            };

            const onMouseUp = () => {
                document.removeEventListener('mousemove', onMouseMove);
                document.removeEventListener('mouseup', onMouseUp);
            };

            document.addEventListener('mousemove', onMouseMove);
            document.addEventListener('mouseup', onMouseUp);
        });
    }

    #dockToContainer() {
        if (!this.container) return;
        
        this.dockState = 'docked';
        this.container.appendChild(this);
        this.css({
            position: 'relative',
            left: 'auto',
            top: 'auto',
            width: '100%',
            height: '100%'
        });
        
        if (this.dockButton) {
            this.dockButton.htmlObject.textContent = '📌';
        }
    }

    #floatWindow() {
        this.dockState = 'floating';
        document.body.appendChild(this.htmlObject);
        
        // Varsayılan pozisyon
        if (!this.htmlObject.style.left || !this.htmlObject.style.top) {
            this.css({
                left: '100px',
                top: '100px'
            });
        }
        
        if (this.dockButton) {
            this.dockButton.htmlObject.textContent = '📋';
        }
    }

    #checkDockProximity() {
        if (!this.dockable || !this.container) return;
        
        const windowRect = this.htmlObject.getBoundingClientRect();
        const containerRect = this.container.htmlObject.getBoundingClientRect();
        
        // Eğer pencerenin çoğu konteynerin içindeyse, dock et
        if (windowRect.left > containerRect.left - 50 && 
            windowRect.right < containerRect.right + 50 &&
            windowRect.top > containerRect.top - 50 &&
            windowRect.bottom < containerRect.bottom + 50) {
            this.dock();
        }
    }

    toggleDock() {
        if (this.dockState === 'docked') {
            this.float();
        } else {
            this.dock();
        }
    }

    dock() {
        if (this.dockable && this.container) {
            this.#dockToContainer();
        }
    }

    float() {
        if (this.floatable) {
            this.#floatWindow();
        }
    }

    show() {
        this.dockState = this.container ? 'docked' : 'floating';
        this.htmlObject.style.display = 'flex';
        this.#setInitialState();
    }

    hide() {
        this.dockState = 'hidden';
        this.htmlObject.style.display = 'none';
    }

    setTitle(title) {
        this.title = title;
        this.titleElement.html(title);
    }

    setContent(content) {
        this.content.html('');
        if (content instanceof HTMLElement || content instanceof Telement) {
            this.content.appendChild(content);
        } else {
            this.content.html(content);
        }
    }

    setContainer(container) {
        this.container = container;
        if (this.dockState === 'docked') {
            this.#dockToContainer();
        }
    }
}

class TToolBox extends TToolWindow {
    constructor(options = {}) {
        const {
            orientation = 'horizontal',
            buttonSize = 32,
            buttonMargin = 2,
            groups = [],
            tools = [],
            ...windowOptions
        } = options;

        super({
            title: 'Toolbox',
            width: orientation === 'horizontal' ? 
                  (buttonSize + buttonMargin * 2) * 8 : 
                  (buttonSize + buttonMargin * 2) * 2 + 20,
            height: orientation === 'vertical' ? 
                   (buttonSize + buttonMargin * 2) * 8 : 
                   (buttonSize + buttonMargin * 2) * 2 + 20,
            ...windowOptions
        });

        this.orientation = orientation;
        this.buttonSize = buttonSize;
        this.buttonMargin = buttonMargin;
        this.tools = {};
        this.groups = {};
        this.activeTool = null;

        this.toolboxContent = new Telement('div', {
            className: 'toolbox-content',
            style: {
                display: 'flex',
                flexDirection: orientation === 'horizontal' ? 'row' : 'column',
                flexWrap: 'wrap',
                gap: buttonMargin + 'px',
                padding: '8px',
                justifyContent: 'flex-start'
            }
        });
        this.setContent(this.toolboxContent);

        // Grupları oluştur
        groups.forEach(group => this.#createGroup(group));
        
        // Araçları ekle
        tools.forEach(tool => this.addTool(tool));

        // Varsayılan olarak görünür yap
        this.show();
    }

    #createGroup(group) {
        this.groups[group.name] = {
            ...group,
            tools: [],
            element: new Telement('div', {
                className: 'tool-group',
                style: {
                    display: 'flex',
                    flexDirection: this.orientation === 'horizontal' ? 'row' : 'column',
                    gap: this.buttonMargin + 'px',
                    marginBottom: '8px'
                }
            })
        };
        this.toolboxContent.appendChild(this.groups[group.name].element);
    }

    addTool(toolOptions) {
        const tool = new TToolBoxButton({
            ...toolOptions,
            parent: this.groups[toolOptions.group]?.element || this.toolboxContent,
            size: this.buttonSize,
            margin: this.buttonMargin
        });

        this.tools[toolOptions.name] = tool;

        if (toolOptions.group) {
            if (!this.groups[toolOptions.group]) {
                this.#createGroup({ name: toolOptions.group });
            }
            this.groups[toolOptions.group].tools.push(tool);
        }

        // Tool seçim olayını dinle
        tool.htmlObject.addEventListener('click', () => {
            if (toolOptions.type === 'toggle') {
                this.setActiveTool(toolOptions.name);
            }
        });

        return tool;
    }

    setActiveTool(toolName) {
        if (this.activeTool === toolName) return;
        
        // Önceki aktif aracı pasif yap
        if (this.activeTool && this.tools[this.activeTool]) {
            this.tools[this.activeTool].setActive(false);
        }
        
        // Yeni aracı aktif yap
        if (toolName && this.tools[toolName]) {
            this.tools[toolName].setActive(true);
            this.activeTool = toolName;
            this.dispatchEvent(new CustomEvent('toolChanged', { detail: toolName }));
        } else {
            this.activeTool = null;
        }
    }

    getTool(name) {
        return this.tools[name];
    }

    setOrientation(orientation) {
        if (this.orientation === orientation) return;
        
        this.orientation = orientation;
        this.toolboxContent.css({
            flexDirection: orientation === 'horizontal' ? 'row' : 'column'
        });
        
        Object.values(this.groups).forEach(group => {
            group.element.css({
                flexDirection: orientation === 'horizontal' ? 'row' : 'column'
            });
        });
    }
  
}

class TToolBoxButton extends Telement {
    constructor(options = {}) {
        const {
            name,
            icon,
            label,
            type = 'action', // 'action' veya 'toggle'
            group = null,
            size = 32,
            margin = 2,
            active = false,
            ...otherOptions
        } = options;

        super('button', {
            className: 'toolbox-button',
            attrs: {
                'data-tool': name,
                'data-type': type,
                'data-group': group
            },
            style: {
                width: size + 'px',
                height: size + 'px',
                margin: margin + 'px',
                padding: '0',
                border: '1px solid #ddd',
                borderRadius: '4px',
                backgroundColor: active ? '#e0e0e0' : '#fff',
                cursor: 'pointer',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                position: 'relative',
                overflow: 'hidden'
            },
            ...otherOptions
        });

    
        this.type = type;
        this.group = group;
        this.active = active;
        this.icon = icon || this.#getDefaultIcon(name);
        this.label = label || name;
       
        this.#setupButton();
    }

    #getDefaultIcon(name) {
        const found = defaultIcons.find(icon => icon.name.toLowerCase() === name.toLowerCase());
        return found?.svg || '';
    }

    #setupButton() {
        // İkon ekle
        if (this.icon) {
            this.htmlObject.innerHTML = this.icon;
        } else {
            this.htmlObject.textContent = this.label.substring(0, 2);
        }

        // Tooltip ekle
        this.htmlObject.title = this.label;

        // Aktif durum stilini ayarla
        if (this.active) {
            this.htmlObject.style.backgroundColor = '#e0e0e0';
            this.htmlObject.style.borderColor = '#aaa';
        }

        // Hover efektleri
        this.htmlObject.addEventListener('mouseenter', () => {
            this.htmlObject.style.backgroundColor = this.active ? '#d0d0d0' : '#f0f0f0';
        });
        
        this.htmlObject.addEventListener('mouseleave', () => {
            this.htmlObject.style.backgroundColor = this.active ? '#e0e0e0' : '#fff';
        });
    }

    setActive(state) {
        this.active = state;
        if (state) {
            this.htmlObject.style.backgroundColor = '#e0e0e0';
            this.htmlObject.style.borderColor = '#aaa';
        } else {
            this.htmlObject.style.backgroundColor = '#fff';
            this.htmlObject.style.borderColor = '#ddd';
        }
    }

    toggle() {
        this.setActive(!this.active);
    }  
  
}

// Dock konteyner sınıfı
class TDockContainer extends Telement {
    constructor(options = {}) {
        super('div', {
            className: 'dock-container',
            style: {
                position: 'relative',
                width: '100%',
                height: '100%',
                display: 'flex',
                flexDirection: 'column',
                backgroundColor: '#f0f0f0',
                border: '1px dashed #ccc',
                overflow: 'hidden'
            },
            ...options
        });

        this.dockZones = {
            top: this.#createDockZone('top'),
            right: this.#createDockZone('right'),
            bottom: this.#createDockZone('bottom'),
            left: this.#createDockZone('left'),
            center: this.#createDockZone('center', true)
        };
        
        this.#setupLayout();
    }

    #createDockZone(position, isCenter = false) {
        const zone = new Telement('div', {
            className: `dock-zone ${position}`,
            style: {
                display: 'flex',
                flexDirection: position === 'left' || position === 'right' ? 'column' : 'row',
                flex: isCenter ? '1' : '0 0 auto',
                minWidth: '50px',
                minHeight: '50px',
                backgroundColor: 'rgba(200, 200, 255, 0.1)',
                border: isCenter ? 'none' : '1px dashed rgba(0,0,0,0.2)',
                position: 'relative'
            }
        });

        if (!isCenter) {
            zone.htmlObject.addEventListener('dragover', (e) => {
                e.preventDefault();
                zone.htmlObject.style.backgroundColor = 'rgba(200, 200, 255, 0.3)';
            });
            
            zone.htmlObject.addEventListener('dragleave', () => {
                zone.htmlObject.style.backgroundColor = 'rgba(200, 200, 255, 0.1)';
            });
            
            zone.htmlObject.addEventListener('drop', (e) => {
                e.preventDefault();
                zone.htmlObject.style.backgroundColor = 'rgba(200, 200, 255, 0.1)';
                
                const toolWindowId = e.dataTransfer.getData('text/plain');
                const toolWindow = document.getElementById(toolWindowId)?.owner;
                if (toolWindow) {
                    this.dockWindow(toolWindow, position);
                }
            });
        }

        this.appendChild(zone);
        return zone;
    }

    #setupLayout() {
        // Ana layout
        const mainRow = new Telement('div', {
            style: {
                display: 'flex',
                flex: '1',
                overflow: 'hidden'
            }
        });

        // Sol, orta ve sağ sütunlar
        const leftCol = new Telement('div', {
            style: {
                display: 'flex',
                flexDirection: 'column',
                flex: '0 0 auto'
            }
        });
        leftCol.appendChild(this.dockZones.left);

        const centerCol = new Telement('div', {
            style: {
                display: 'flex',
                flexDirection: 'column',
                flex: '1',
                minWidth: '0',
                minHeight: '0'
            }
        });
        centerCol.appendChild(this.dockZones.top);
        centerCol.appendChild(this.dockZones.center);
        centerCol.appendChild(this.dockZones.bottom);

        const rightCol = new Telement('div', {
            style: {
                display: 'flex',
                flexDirection: 'column',
                flex: '0 0 auto'
            }
        });
        rightCol.appendChild(this.dockZones.right);

        mainRow.appendChild(leftCol);
        mainRow.appendChild(centerCol);
        mainRow.appendChild(rightCol);

        this.htmlObject.innerHTML = '';
        this.appendChild(mainRow);
    }

    dockWindow(window, position = 'center') {
        if (!(window instanceof TToolWindow)) return;
        
        window.dockState = 'docked';
        window.container = this.dockZones[position];
        this.dockZones[position].appendChild(window);
        
        // Dock bölgesine uygun boyutlandırma
        if (position === 'left' || position === 'right') {
            window.css({
                width: '200px',
                height: '100%'
            });
        } else if (position === 'top' || position === 'bottom') {
            window.css({
                width: '100%',
                height: '150px'
            });
        } else {
            window.css({
                width: '100%',
                height: '100%'
            });
        }
    }

    addWindow(window, position = 'center') {
        if (!(window instanceof TToolWindow)) {
            window = new TToolWindow({
                title: window.title || 'Tool Window',
                content: window.content || '',
                ...window
            });
        }
        
        this.dockWindow(window, position);
        return window;
    }
}

